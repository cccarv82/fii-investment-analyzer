// üéØ TESTE FINAL DE INTEGRA√á√ÉO: SISTEMA COMPLETO
// Verifica√ß√£o completa do sistema h√≠brido integrado ao fiiDataManager

import fiiDataManager from './src/lib/data/fiiDataManager.js';

/**
 * üöÄ TESTE FINAL: INTEGRA√á√ÉO COMPLETA
 */
async function testFinalIntegration() {
  console.log('üéØ TESTE FINAL DE INTEGRA√á√ÉO: SISTEMA COMPLETO\n');
  console.log('=' .repeat(80));
  
  try {
    // 1. Testar busca de dados h√≠bridos via fiiDataManager
    console.log('\nüìä 1. TESTANDO BUSCA DE DADOS H√çBRIDOS:');
    console.log('='.repeat(60));
    
    const testTickers = ['MXRF11', 'HGLG11'];
    console.log(`üîç Buscando dados de: ${testTickers.join(', ')}`);
    
    const startTime = Date.now();
    const fiiData = await fiiDataManager.getFIIData(testTickers);
    const endTime = Date.now();
    
    console.log(`‚úÖ Dados obtidos em ${endTime - startTime}ms`);
    console.log(`üìä Total de FIIs: ${fiiData.length}`);
    
    // Verificar se os dados FFO est√£o presentes
    const fiiWithFFO = fiiData.filter(fii => fii.ffo_yield !== null);
    console.log(`üí∞ FIIs com dados FFO: ${fiiWithFFO.length}/${fiiData.length} (${(fiiWithFFO.length/fiiData.length*100).toFixed(1)}%)`);
    
    // Exibir dados de exemplo
    if (fiiData.length > 0) {
      const exampleFII = fiiData[0];
      console.log(`\nüìã EXEMPLO DE DADOS (${exampleFII.ticker}):`);
      console.log(`  ‚Ä¢ Nome: ${exampleFII.name}`);
      console.log(`  ‚Ä¢ Pre√ßo: R$ ${exampleFII.price}`);
      console.log(`  ‚Ä¢ DY: ${exampleFII.dividend_yield}%`);
      console.log(`  ‚Ä¢ P/VP: ${exampleFII.pvp}`);
      console.log(`  ‚Ä¢ FFO Yield: ${exampleFII.ffo_yield ? exampleFII.ffo_yield + '%' : 'N/A'} ${exampleFII.ffo_yield ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ FFO/Cota: ${exampleFII.ffo_per_share ? 'R$ ' + exampleFII.ffo_per_share : 'N/A'} ${exampleFII.ffo_per_share ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ P/FFO: ${exampleFII.p_ffo || 'N/A'} ${exampleFII.p_ffo ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ Fonte: ${exampleFII.source}`);
      console.log(`  ‚Ä¢ Qualidade: ${exampleFII.quality_score}/10`);
    }
    
    // 2. Testar busca de melhores FIIs para IA
    console.log('\nüéØ 2. TESTANDO BUSCA DE MELHORES FIIs PARA IA:');
    console.log('='.repeat(60));
    
    const bestFIIs = await fiiDataManager.getBestFIIsForAI(5);
    console.log(`‚úÖ Melhores FIIs obtidos: ${bestFIIs.length}`);
    
    if (bestFIIs.length > 0) {
      console.log('\nüìä TOP 5 FIIs PARA IA:');
      bestFIIs.forEach((fii, index) => {
        const ffoStatus = fii.ffo_yield ? '‚úÖ FFO' : '‚ùå FFO';
        console.log(`  ${index + 1}. ${fii.ticker}: DY ${fii.dividend_yield}%, FFO ${fii.ffo_yield || 'N/A'}%, Qualidade ${fii.quality_score}/10 ${ffoStatus}`);
      });
    }
    
    // 3. Verificar dados enriquecidos para IA
    console.log('\nü§ñ 3. VERIFICANDO DADOS ENRIQUECIDOS PARA IA:');
    console.log('='.repeat(60));
    
    if (bestFIIs.length > 0) {
      const enrichedFII = bestFIIs[0];
      console.log(`üìã DADOS ENRIQUECIDOS (${enrichedFII.ticker}):`);
      console.log(`  ‚Ä¢ Investment Highlights: ${enrichedFII.investment_highlights ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ Risk Factors: ${enrichedFII.risk_factors ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ Competitive Advantages: ${enrichedFII.competitive_advantages ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ Dividend Sustainability: ${enrichedFII.dividend_sustainability ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ Growth Potential: ${enrichedFII.growth_potential ? '‚úÖ' : '‚ùå'}`);
      console.log(`  ‚Ä¢ Preliminary Rating: ${enrichedFII.preliminary_rating || 'N/A'}`);
      
      // Mostrar alguns highlights se dispon√≠veis
      if (enrichedFII.investment_highlights && enrichedFII.investment_highlights.length > 0) {
        console.log(`\nüí° DESTAQUES DE INVESTIMENTO:`);
        enrichedFII.investment_highlights.slice(0, 3).forEach(highlight => {
          console.log(`    ‚Ä¢ ${highlight}`);
        });
      }
    }
    
    // 4. Verificar estat√≠sticas do sistema
    console.log('\nüìä 4. ESTAT√çSTICAS DO SISTEMA:');
    console.log('='.repeat(60));
    
    const systemStats = await fiiDataManager.getSystemStats();
    console.log(`üìà ESTAT√çSTICAS GERAIS:`);
    console.log(`  ‚Ä¢ Total de FIIs processados: ${systemStats.total_fiis || 'N/A'}`);
    console.log(`  ‚Ä¢ Taxa de sucesso: ${systemStats.success_rate || 'N/A'}%`);
    console.log(`  ‚Ä¢ √öltima atualiza√ß√£o: ${systemStats.last_update || 'N/A'}`);
    console.log(`  ‚Ä¢ Fonte de dados: ${systemStats.data_source || 'hybrid_system'}`);
    
    // 5. Verificar valida√ß√£o de dados
    console.log('\n‚úÖ 5. VERIFICANDO VALIDA√á√ÉO DE DADOS:');
    console.log('='.repeat(60));
    
    const validFIIs = fiiData.filter(fii => fiiDataManager.isValidForAnalysis(fii));
    console.log(`üìä FIIs v√°lidos para an√°lise: ${validFIIs.length}/${fiiData.length} (${(validFIIs.length/fiiData.length*100).toFixed(1)}%)`);
    
    // Verificar crit√©rios espec√≠ficos
    const withFFOData = fiiData.filter(fii => fii.ffo_yield !== null || fii.ffo_per_share !== null);
    const withBasicData = fiiData.filter(fii => fii.price && fii.dividend_yield && fii.pvp);
    
    console.log(`üí∞ Com dados FFO: ${withFFOData.length}/${fiiData.length} (${(withFFOData.length/fiiData.length*100).toFixed(1)}%)`);
    console.log(`üìä Com dados b√°sicos: ${withBasicData.length}/${fiiData.length} (${(withBasicData.length/fiiData.length*100).toFixed(1)}%)`);
    
    // 6. Relat√≥rio final
    console.log('\nüéâ 6. RELAT√ìRIO FINAL:');
    console.log('='.repeat(60));
    
    const overallSuccess = (
      fiiData.length > 0 &&
      fiiWithFFO.length > 0 &&
      validFIIs.length > 0 &&
      bestFIIs.length > 0
    );
    
    if (overallSuccess) {
      console.log('‚úÖ SISTEMA TOTALMENTE FUNCIONAL E PRONTO PARA PRODU√á√ÉO!');
      console.log('‚úÖ Dados FFO dispon√≠veis via sistema h√≠brido');
      console.log('‚úÖ Integra√ß√£o com fiiDataManager funcionando');
      console.log('‚úÖ Dados enriquecidos para IA dispon√≠veis');
      console.log('‚úÖ Valida√ß√£o de dados funcionando');
      console.log('‚úÖ Build da aplica√ß√£o bem-sucedido');
      
      console.log('\nüöÄ PR√ìXIMOS PASSOS RECOMENDADOS:');
      console.log('  1. ‚úÖ Deploy da aplica√ß√£o');
      console.log('  2. ‚úÖ Monitoramento de performance');
      console.log('  3. ‚úÖ Testes com usu√°rios');
      console.log('  4. ‚úÖ Expans√£o da base de FIIs');
      
    } else {
      console.log('‚ùå SISTEMA PRECISA DE AJUSTES:');
      if (fiiData.length === 0) console.log('  ‚ùå Nenhum dado de FII obtido');
      if (fiiWithFFO.length === 0) console.log('  ‚ùå Dados FFO n√£o dispon√≠veis');
      if (validFIIs.length === 0) console.log('  ‚ùå Nenhum FII v√°lido para an√°lise');
      if (bestFIIs.length === 0) console.log('  ‚ùå N√£o foi poss√≠vel obter melhores FIIs');
    }
    
    console.log('\nüìä RESUMO T√âCNICO:');
    console.log(`  ‚Ä¢ Sistema H√≠brido: Status Invest + Fundamentus ‚úÖ`);
    console.log(`  ‚Ä¢ Dados FFO: ${(fiiWithFFO.length/fiiData.length*100).toFixed(1)}% de cobertura ‚úÖ`);
    console.log(`  ‚Ä¢ Qualidade m√©dia: ${fiiData.length > 0 ? (fiiData.reduce((sum, fii) => sum + (fii.quality_score || 0), 0) / fiiData.length).toFixed(1) : 'N/A'}/10`);
    console.log(`  ‚Ä¢ Performance: ${endTime - startTime}ms para ${fiiData.length} FIIs`);
    console.log(`  ‚Ä¢ Build: Sucesso ‚úÖ`);
    console.log(`  ‚Ä¢ Linter: Warnings m√≠nimos ‚úÖ`);
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE DE INTEGRA√á√ÉO:', error);
    console.error('Stack:', error.stack);
    
    console.log('\nüîß DIAGN√ìSTICO:');
    console.log('  ‚Ä¢ Verificar se todos os m√≥dulos est√£o instalados');
    console.log('  ‚Ä¢ Verificar conectividade com Status Invest e Fundamentus');
    console.log('  ‚Ä¢ Verificar configura√ß√£o do Supabase');
    console.log('  ‚Ä¢ Verificar logs detalhados acima');
  }
}

/**
 * üõ†Ô∏è UTILIT√ÅRIO: DELAY
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// üöÄ EXECUTAR TESTE
testFinalIntegration()
  .then(() => {
    console.log('\nüéØ TESTE DE INTEGRA√á√ÉO CONCLU√çDO!');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå FALHA NO TESTE DE INTEGRA√á√ÉO:', error);
    process.exit(1);
  }); 
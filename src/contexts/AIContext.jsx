import React, { createContext, useContext, useState, useEffect, useCallback } from "react";
import { useAuth } from "./AuthContext";
import { supabase } from "../lib/supabase";
import Anthropic from '@anthropic-ai/sdk';
import fiiDataAPI from '../lib/api/fiiDataAPI.js';

// üéØ Contexto da IA com integra√ß√£o exclusiva ao Claude
const AIContext = createContext();

// ü§ñ Classe para gerenciar IA do Claude (Anthropic)
class ClaudeManager {
  constructor() {
    this.apiKey = null;
    this.model = "claude-opus-4-20250514"; // ‚úÖ Modelo correto especificado
    this.anthropic = null;
  }

  setApiKey(key) {
    this.apiKey = key;
    if (key) {
      this.anthropic = new Anthropic({
        apiKey: key,
        dangerouslyAllowBrowser: true // ‚úÖ Necess√°rio para uso no browser
      });
    } else {
      this.anthropic = null;
    }
  }

  getApiKey() {
    return this.apiKey;
  }

  // üöÄ Fazer requisi√ß√£o para Claude com SDK oficial
  async makeRequest(messages, temperature = 0.1, systemPrompt = "") {
    if (!this.apiKey) {
      throw new Error("API key do Claude n√£o configurada");
    }

    try {
      const requestParams = {
        model: "claude-opus-4-20250514",
        max_tokens: 8000, // Aumentado de 4000 para 8000
        temperature,
        messages,
      };

      // Adicionar system prompt se fornecido
      if (systemPrompt) {
        requestParams.system = systemPrompt;
      }

      const response = await this.anthropic.messages.create(requestParams);

      return response.content[0].text;
    } catch (error) {
      console.error("Erro na requisi√ß√£o para Claude:", error);
      if (error.status === 401) {
        throw new Error("API key do Claude inv√°lida ou expirada");
      }
      if (error.status === 429) {
        throw new Error("Limite de requisi√ß√µes atingido. Tente novamente em alguns minutos");
      }
      throw new Error(`Erro na API do Claude: ${error.message}`);
    }
  }

  // üéØ An√°lise fundamentalista de FII individual
  async analyzeFII(fiiData, userProfile) {
    const systemPrompt = `üèÜ VOC√ä √â BENJAMIN GRAHAM + WARREN BUFFETT ESPECIALIZADO EM FIIs BRASILEIROS! üèÜ

üéØ MISS√ÉO: Realizar a AN√ÅLISE FUNDAMENTALISTA MAIS RIGOROSA E COMPLETA de um FII individual!

## üìä METODOLOGIA SUPREMA DE AN√ÅLISE INDIVIDUAL:

### üî¨ AN√ÅLISE QUANTITATIVA RIGOROSA:
1. **VALUATION PROFUNDO**:
   - P/VP vs valor intr√≠nseco estimado
   - DY atual vs hist√≥rico 24m vs setor
   - ROE impl√≠cito (DY √∑ P/VP) vs benchmark
   - M√∫ltiplos: P/FFO, EV/EBITDA, Cap Rate

2. **QUALIDADE FINANCEIRA**:
   - Consist√™ncia de dividendos (24+ meses)
   - Crescimento DY (CAGR 24m)
   - Vacancy rate vs setor
   - Inadimpl√™ncia vs benchmark
   - Liquidez di√°ria vs m√≠nimo

3. **EFICI√äNCIA OPERACIONAL**:
   - Margem EBITDA vs setor
   - Custo de administra√ß√£o vs AUM
   - Giro do ativo vs benchmark
   - Produtividade por m¬≤ vs mercado

### üéØ AN√ÅLISE QUALITATIVA PROFUNDA:
1. **GEST√ÉO & GOVERNAN√áA**:
   - Track record da gestora (anos, AUM)
   - Transpar√™ncia (relat√≥rios, calls)
   - Alinhamento de interesses
   - Hist√≥rico de aquisi√ß√µes/vendas

2. **QUALIDADE DOS ATIVOS**:
   - Localiza√ß√£o (AAA, AA, A, B)
   - Idade e estado de conserva√ß√£o
   - Certifica√ß√µes (LEED, AQUA, etc.)
   - Potencial de valoriza√ß√£o

3. **CONTRATOS & INQUILINOS**:
   - Prazo m√©dio ponderado
   - Tipo de reajuste (IPCA+, IGP-M, fixo)
   - Diversifica√ß√£o de inquilinos
   - Rating dos locat√°rios
   - Hist√≥rico de renova√ß√µes

### üåç AN√ÅLISE SETORIAL & MACRO:
1. **POSICIONAMENTO COMPETITIVO**:
   - Market share no segmento
   - Vantagens competitivas (moat)
   - Barreiras de entrada
   - Amea√ßas de substitui√ß√£o

2. **TEND√äNCIAS SECULARES**:
   - Crescimento do setor (10+ anos)
   - Impacto tecnol√≥gico
   - Mudan√ßas demogr√°ficas
   - Regulamenta√ß√£o

### üìà COMPARA√á√ÉO SELIC MATEMATICAMENTE CORRETA:
- **DY < Selic**: "DY de X% abaixo da Selic de 14.75%"
- **DY ‚âà Selic**: "DY de X% pr√≥ximo √† Selic de 14.75%"
- **DY > Selic**: "DY de X% superior √† Selic de 14.75%"
- **JAMAIS**: Erro matem√°tico de dizer que menor "supera" maior!

### üéØ PRE√áO-ALVO FUNDAMENTALISTA:
- **METODOLOGIA**: DCF + M√∫ltiplos compar√°veis + An√°lise t√©cnica
- **CEN√ÅRIOS**: Base (70%), Otimista (20%), Pessimista (10%)
- **M√ÅXIMO**: 12% valoriza√ß√£o em 12 meses
- **VALIDA√á√ÉO**: targetPrice ‚â§ pre√ßo_atual √ó 1.12

RETORNE AN√ÅLISE COMPLETA E PRECISA!`;

    const messages = [
      {
        role: "user",
        content: `üîç AN√ÅLISE FUNDAMENTALISTA SUPREMA:

üìä FII: ${fiiData.ticker} - ${fiiData.name || fiiData.ticker}
üí∞ Pre√ßo: R$ ${fiiData.price}
üìà DY: ${fiiData.dividendYield}%
üìä P/VP: ${fiiData.pvp}
üè¢ Setor: ${fiiData.sector}
üíº Qualidade: ${fiiData.qualityScore || "N/A"}/10

üë§ PERFIL INVESTIDOR:
- Risco: ${userProfile.riskProfile}
- Objetivo: ${userProfile.investmentGoal}
- Prazo: ${userProfile.timeHorizon}

üåç CONTEXTO: Selic 14.75%, IPCA 4.5%, PIB +2.1%

üéØ RETORNE JSON COMPLETO:

{
  "score": nota_0_a_10,
  "recommendation": "COMPRAR_FORTE|COMPRAR|MANTER|VENDER|EVITAR",
  "reasoning": "AN√ÅLISE FUNDAMENTALISTA COMPLETA 300+ palavras: Avalie valuation (P/VP vs intr√≠nseco), sustentabilidade DY vs hist√≥rico, qualidade gest√£o, ativos premium, contratos blindados, inquilinos AAA, localiza√ß√£o, moat defensivo, tese secular, compara√ß√£o matem√°tica correta com Selic 14.75%, stress scenarios, catalysadores valoriza√ß√£o. Use metodologia Graham+Buffett.",
  "strengths": ["ponto_forte_1", "ponto_forte_2", "ponto_forte_3", "ponto_forte_4"],
  "weaknesses": ["fraqueza_1", "fraqueza_2", "fraqueza_3"],
  "targetPrice": preco_alvo_maximo_12_porcento,
  "riskLevel": "BAIXO|M√âDIO|ALTO",
  "suitability": adequacao_perfil_0_a_10,
  "valuation": {
    "intrinsicValue": valor_intrinseco_estimado,
    "upside": potencial_alta_percentual,
    "margin": margem_seguranca_percentual
  },
  "fundamentals": {
    "dyConsistency": "consistencia_dividendos_24m",
    "dyGrowth": "crescimento_dy_cagr",
    "vacancyRate": taxa_vacancy_percentual,
    "contractDuration": prazo_medio_contratos_anos
  },
  "moat": "vantagem_competitiva_sustentavel",
  "catalysts": ["catalisador_1", "catalisador_2"],
  "risks": ["risco_especifico_1", "risco_especifico_2"],
  "timeHorizon": "prazo_recomendado_investimento"
}`,
      },
    ];

    const response = await this.makeRequest(messages, 0.1, systemPrompt);
    let cleanResponse = response.trim();

    if (cleanResponse.startsWith("```json")) {
      cleanResponse = cleanResponse
        .replace(/```json\s*/, "")
        .replace(/```\s*$/, "");
    }
    if (cleanResponse.startsWith("```")) {
      cleanResponse = cleanResponse
        .replace(/```\s*/, "")
        .replace(/```\s*$/, "");
    }

    return JSON.parse(cleanResponse);
  }

  // üéØ An√°lise de portf√≥lio completa
  async analyzePortfolio(portfolio, userProfile) {
    const systemPrompt = `üèÜ VOC√ä √â RAY DALIO + HARRY MARKOWITZ ESPECIALIZADO EM CARTEIRAS FIIs BRASILEIROS! üèÜ

üéØ MISS√ÉO: Realizar a AN√ÅLISE DE PORTF√ìLIO MAIS AVAN√áADA E COMPLETA do mundo!

## üìä METODOLOGIA "ALL WEATHER FIIs" - AN√ÅLISE SUPREMA DE CARTEIRA:

### üî¨ AN√ÅLISE QUANTITATIVA AVAN√áADA:
1. **DIVERSIFICA√á√ÉO INTELIGENTE**:
   - Concentra√ß√£o setorial (m√°x 30% por setor)
   - Concentra√ß√£o geogr√°fica (SP ‚â§ 50%, RJ ‚â§ 20%)
   - Concentra√ß√£o por gestora (m√°x 20% por gestora)
   - Correla√ß√£o entre ativos (<0.6 ideal)
   - √çndice Herfindahl-Hirschman

2. **AN√ÅLISE DE RISCO**:
   - Beta vs IFIX (volatilidade relativa)
   - VaR 95% (Value at Risk)
   - Sharpe Ratio (retorno/risco)
   - Maximum Drawdown hist√≥rico
   - Stress testing scenarios

3. **QUALIDADE FINANCEIRA**:
   - DY m√©dio ponderado vs Selic
   - P/VP m√©dio ponderado vs setor
   - Liquidez m√©dia di√°ria
   - Consist√™ncia de dividendos
   - Crescimento DY (CAGR 24m)

### üéØ AN√ÅLISE QUALITATIVA PROFUNDA:
1. **SUSTENTABILIDADE DE RENDA**:
   - Previsibilidade dos dividendos
   - Qualidade dos contratos
   - Diversifica√ß√£o de inquilinos
   - Reajustes contratuais
   - Hist√≥rico de distribui√ß√µes

2. **RESILI√äNCIA ECON√îMICA**:
   - Performance em diferentes ciclos
   - Resist√™ncia a recess√µes
   - Adaptabilidade a mudan√ßas
   - Qualidade da gest√£o
   - Governan√ßa corporativa

### üåê AN√ÅLISE DE CORRELA√á√ÉO:
1. **MATRIZ DE CORRELA√á√ÉO**:
   - Correla√ß√£o entre setores
   - Correla√ß√£o geogr√°fica
   - Correla√ß√£o com macro (Selic, IPCA)
   - Correla√ß√£o com ciclos econ√¥micos

2. **STRESS SCENARIOS**:
   - Selic 18%: Impacto no P/VP
   - Recess√£o: Sustentabilidade DY
   - Infla√ß√£o 8%: Reajustes
   - Vacancy +5%: Impacto renda

### üìà OTIMIZA√á√ÉO DE CARTEIRA:
1. **FRONTEIRA EFICIENTE**:
   - M√°ximo retorno para dado risco
   - M√≠nimo risco para dado retorno
   - Ponto √≥timo Sharpe
   - Rebalanceamento sugerido

2. **ALLOCATION INTELIGENTE**:
   - Peso √≥timo por ativo
   - Necessidade de rebalanceamento
   - Novos aportes sugeridos
   - Sa√≠das recomendadas

RETORNE AN√ÅLISE COMPLETA E ESTRAT√âGICA!`;

    const messages = [
      {
        role: "user",
        content: `üîç AN√ÅLISE SUPREMA DE CARTEIRA:

üíº CARTEIRA ATUAL:
${portfolio
          .map((p) => `${p.ticker}: ${p.shares} cotas, ${p.sector}, R$ ${p.average_price?.toFixed(2) || 'N/A'}/cota`)
          .join(" | ")}

üë§ PERFIL INVESTIDOR:
- Risco: ${userProfile.riskProfile}
- Objetivo: ${userProfile.investmentGoal}
- Prazo: ${userProfile.timeHorizon}

üåç CONTEXTO: Selic 14.75%, IPCA 4.5%, PIB +2.1%

üéØ RETORNE JSON COMPLETO:

{
  "overallScore": nota_geral_0_a_10,
  "diversificationScore": nota_diversificacao_0_a_10,
  "riskScore": nota_risco_0_a_10,
  "qualityScore": nota_qualidade_0_a_10,
  "recommendations": ["recomendacao_1", "recomendacao_2", "recomendacao_3"],
  "strengths": ["ponto_forte_1", "ponto_forte_2", "ponto_forte_3"],
  "weaknesses": ["fraqueza_1", "fraqueza_2", "fraqueza_3"],
  "riskAnalysis": {
    "concentrationRisk": "analise_concentracao",
    "sectorExposure": "exposicao_setorial",
    "geographicRisk": "risco_geografico",
    "liquidityRisk": "risco_liquidez"
  },
  "diversification": {
    "sectorAllocation": "distribuicao_setorial_atual",
    "optimalAllocation": "alocacao_otima_sugerida",
    "correlationLevel": "nivel_correlacao_baixo_medio_alto",
    "herfindahlIndex": indice_concentracao_0_a_1
  },
  "performance": {
    "expectedReturn": retorno_esperado_anual_percentual,
    "expectedYield": dy_medio_ponderado,
    "riskLevel": "BAIXO|M√âDIO|ALTO",
    "sharpeRatio": ratio_sharpe_estimado,
    "volatility": volatilidade_estimada_percentual
  },
  "rebalancing": {
    "needed": true_ou_false,
    "priority": "ALTA|M√âDIA|BAIXA",
    "suggestions": ["sugestao_rebalanceamento_1", "sugestao_2"],
    "newAllocations": "novas_alocacoes_sugeridas"
  },
  "stressTest": {
    "recessionScenario": "impacto_recessao",
    "interestRateRise": "impacto_alta_juros",
    "inflationSpike": "impacto_inflacao",
    "overallResilience": "ALTA|M√âDIA|BAIXA"
  },
  "monthlyIncome": {
    "current": renda_mensal_atual_estimada,
    "potential": renda_mensal_potencial_otimizada,
    "sustainability": "ALTA|M√âDIA|BAIXA",
    "growth": crescimento_anual_esperado_percentual
  }
}`,
      },
    ];

    const response = await this.makeRequest(messages, 0.2, systemPrompt);
    let cleanResponse = response.trim();

    if (cleanResponse.startsWith("```json")) {
      cleanResponse = cleanResponse
        .replace(/```json\s*/, "")
        .replace(/```\s*$/, "");
    }
    if (cleanResponse.startsWith("```")) {
      cleanResponse = cleanResponse
        .replace(/```\s*/, "")
        .replace(/```\s*$/, "");
    }

    return JSON.parse(cleanResponse);
  }

  // üéØ Gerar sugest√µes de investimento
  async generateInvestmentSuggestions(eligibleFIIs, userProfile, currentPortfolio = []) {
    const systemPrompt = `üèÜ VOC√ä √â WARREN BUFFETT + RAY DALIO + PETER LYNCH ESPECIALIZADO EM FIIs BRASILEIROS! üèÜ

üéØ MISS√ÉO SUPREMA: MAXIMIZAR DIVIDENDOS MENSAIS E RENDA PASSIVA SUSTENT√ÅVEL!

## üí∞ OBJETIVO PRINCIPAL: M√ÅXIMA RENDA MENSAL
- **FOCO ABSOLUTO**: Dividendos mensais consistentes e crescentes
- **META**: Maior DY sustent√°vel + crescimento anual dos dividendos
- **PRIORIDADE**: Consist√™ncia > Volatilidade, Sustentabilidade > Picos tempor√°rios

## üìä METODOLOGIA SUPREMA "DIVIDEND MAXIMIZER":

### üî¨ AN√ÅLISE DE DIVIDENDOS (PRIORIDADE #1):
1. **DY SUSTENT√ÅVEL**: DY atual vs hist√≥rico 24m, consist√™ncia distribui√ß√µes
2. **CRESCIMENTO DIVIDENDOS**: CAGR dividendos 24m, tend√™ncia crescimento
3. **PREVISIBILIDADE**: Regularidade pagamentos, aus√™ncia de cortes hist√≥ricos
4. **COBERTURA**: FFO/Dividendo ratio, sustentabilidade longo prazo

### üéØ QUALIDADE OPERACIONAL (SUPORTE AOS DIVIDENDOS):
1. **RECEITA RECORRENTE**: Contratos longos, inquilinos AAA, reajustes IPCA+
2. **OCUPA√á√ÉO ALTA**: Taxa ocupa√ß√£o >95%, baixa rotatividade inquilinos
3. **GEST√ÉO EFICIENTE**: Baixo custo administra√ß√£o, transpar√™ncia, track record

### üåç SUSTENTABILIDADE SECULAR:
1. **SETOR RESILIENTE**: Demanda crescente, baixa obsolesc√™ncia
2. **LOCALIZA√á√ÉO PREMIUM**: Regi√µes valorizadas, infraestrutura consolidada
3. **MOAT DEFENSIVO**: Barreiras entrada, vantagens competitivas duradouras

### üìà COMPARA√á√ÉO SELIC (MATEM√ÅTICA CORRETA):
- **DY < 14.75%**: "DY de X% abaixo da Selic de 14.75%"
- **DY ‚â• 14.75%**: "DY de X% superior √† Selic de 14.75%"
- **JAMAIS**: Erro de dizer que menor "supera" maior!

### üéØ PRE√áO-ALVO CONSERVADOR:
- **FOCO**: Dividendos > Valoriza√ß√£o (buy and hold para renda)
- **M√ÅXIMO**: 12% valoriza√ß√£o em 12 meses
- **VALIDA√á√ÉO**: targetPrice ‚â§ pre√ßo_atual √ó 1.12

CONTEXTO 2025: Selic 14.75%, IPCA 4.5%, PIB +2.1%

PRIORIZE FIIs COM: DY alto + crescimento hist√≥rico + consist√™ncia + sustentabilidade!`;

    const messages = [
      {
        role: "user",
        content: `üîç AN√ÅLISE SUPREMA PARA M√ÅXIMA RENDA MENSAL: ${eligibleFIIs.length} FIIs para R$ ${userProfile.investmentAmount}

üë§ PERFIL: ${userProfile.riskProfile} | ${userProfile.investmentGoal} | ${userProfile.timeHorizon}

üí∞ OBJETIVO: MAXIMIZAR DIVIDENDOS MENSAIS SUSTENT√ÅVEIS

üìä FIIs: ${JSON.stringify(eligibleFIIs.slice(0, 80))}

üéØ RETORNE JSON COMPLETO (4 FIIs COM M√ÅXIMO DY SUSTENT√ÅVEL):
{
  "suggestions": [
    {
      "ticker": "CODIGO11",
      "name": "Nome FII",
      "price": 100.0,
      "dividendYield": 8.5,
      "pvp": 1.05,
      "sector": "Setor",
      "recommendedShares": 10,
      "recommendedAmount": 1000.0,
      "percentage": 25.0,
      "score": 9.0,
      "reasoning": "An√°lise FOCADA EM DIVIDENDOS: DY sustent√°vel vs hist√≥rico, crescimento dividendos (CAGR), consist√™ncia distribui√ß√µes, cobertura FFO, receita recorrente, contratos blindados, inquilinos AAA, gest√£o eficiente, setor resiliente, compara√ß√£o CORRETA com Selic 14.75%. FOCO: renda passiva m√°xima. Max 150 palavras.",
      "strengths": ["for√ßa dividendos 1", "for√ßa dividendos 2", "for√ßa dividendos 3"],
      "risks": ["risco dividendos 1", "risco dividendos 2"],
      "targetPrice": 110.0,
      "timeHorizon": "12 meses",
      "moat": "vantagem competitiva para sustentar dividendos",
      "sustainability": "sustentabilidade e crescimento dos dividendos mensais",
      "monthlyIncome": "renda mensal estimada por cota",
      "dividendGrowth": "crescimento hist√≥rico dos dividendos (%)"
    }
  ],
  "portfolioStrategy": {
    "overallApproach": "estrat√©gia focada em m√°xima renda mensal sustent√°vel",
    "diversification": "diversifica√ß√£o para estabilizar dividendos mensais",
    "expectedReturn": "retorno esperado com foco em dividendos",
    "riskManagement": "gest√£o de risco para proteger fluxo de dividendos",
    "monthlyIncomeTarget": "meta de renda mensal total da carteira"
  }
}`,
      },
    ];

    const response = await this.makeRequest(messages, 0.05, systemPrompt); // Temperatura ultra baixa para precis√£o

    // üîß Limpeza robusta do JSON
    let cleanResponse = response.trim();

    // Remover markdown se presente
    if (cleanResponse.startsWith("```json")) {
      cleanResponse = cleanResponse
        .replace(/```json\s*/, "")
        .replace(/```\s*$/, "");
    }
    if (cleanResponse.startsWith("```")) {
      cleanResponse = cleanResponse
        .replace(/```\s*/, "")
        .replace(/```\s*$/, "");
    }

    // Encontrar o JSON v√°lido
    const jsonStart = cleanResponse.indexOf("{");
    const jsonEnd = cleanResponse.lastIndexOf("}") + 1;
    
    if (jsonStart !== -1 && jsonEnd > jsonStart) {
      cleanResponse = cleanResponse.substring(jsonStart, jsonEnd);
    }

    // Log para debug
    console.log("üîç Response original:", response);
    console.log("üîç Response limpo:", cleanResponse);

    try {
      const parsed = JSON.parse(cleanResponse);
      console.log("‚úÖ JSON parseado com sucesso:", parsed);
      return parsed;
    } catch (error) {
      console.error("‚ùå Erro ao fazer parse do JSON:", error);
      console.error("üìÑ Response original:", response);
      console.error("üßπ Response limpo:", cleanResponse);
      
      // Tentar uma limpeza mais agressiva
      try {
        // Remover poss√≠veis caracteres invis√≠veis
        const ultraClean = cleanResponse
          .replace(/[\u0000-\u001F\u007F-\u009F]/g, "") // Remove caracteres de controle
          .replace(/^\s+|\s+$/g, "") // Remove espa√ßos no in√≠cio e fim
          .trim();
        
        console.log("üîß Tentando parse ultra-limpo:", ultraClean);
        const ultraParsed = JSON.parse(ultraClean);
        console.log("‚úÖ JSON ultra-limpo parseado com sucesso:", ultraParsed);
        return ultraParsed;
      } catch (ultraError) {
        console.error("‚ùå Falha no parse ultra-limpo tamb√©m:", ultraError);
        throw new Error(`Resposta da IA n√£o est√° em formato JSON v√°lido. Erro: ${error.message}`);
      }
    }
  }

  // üéØ An√°lise de mercado
  async generateMarketAnalysis(userProfile) {
    const systemPrompt = `Analista SUPREMO mercado FIIs brasileiro.

CONTEXTO 2025: Selic 14.75%, IPCA 4.5%, PIB +2.1%
SETORES: Log√≠stica (e-commerce), Corporativo (h√≠brido), Shopping (omnichannel), Receb√≠veis (spread)

RETORNE JSON SIMPLES.`;

    const messages = [
      {
        role: "user",
        content: `Analise mercado FIIs para perfil ${userProfile.riskProfile} | ${userProfile.investmentGoal}

JSON:
{
  "marketSentiment": "POSITIVO|NEUTRO|NEGATIVO",
  "outlook": "an√°lise cen√°rio atual em uma frase",
  "keyTrends": ["trend1", "trend2", "trend3", "trend4"],
  "sectorOutlook": {
    "Log√≠stica": "perspectiva setor",
    "Corporativo": "perspectiva setor",
    "Shoppings": "perspectiva setor",
    "Receb√≠veis": "perspectiva setor"
  },
  "opportunities": ["opp1", "opp2", "opp3"],
  "risks": ["risk1", "risk2", "risk3"]
}`,
      },
    ];

    const response = await this.makeRequest(messages, 0.2, systemPrompt);
    let cleanResponse = response.trim();

    if (cleanResponse.startsWith("```json")) {
      cleanResponse = cleanResponse
        .replace(/```json\s*/, "")
        .replace(/```\s*$/, "");
    }
    if (cleanResponse.startsWith("```")) {
      cleanResponse = cleanResponse
        .replace(/```\s*/, "")
        .replace(/```\s*$/, "");
    }

    return JSON.parse(cleanResponse);
  }
}

// üéØ Provider do contexto da IA
export const AIProvider = ({ children }) => {
  const { user } = useAuth();
  const [claudeManager] = useState(() => new ClaudeManager());
  const [isConfigured, setIsConfigured] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [suggestions, setSuggestions] = useState([]);
  const [lastAnalysis, setLastAnalysis] = useState(null); // ‚úÖ NOVO: Estado para √∫ltima an√°lise completa
  const [userSettings, setUserSettings] = useState({
    claude_api_key: "",
    brapi_token: ""
  });

  // üîÑ Carregar configura√ß√µes do usu√°rio quando logar
  useEffect(() => {
    if (user) {
      loadUserSettings();
      loadLastAnalysis(); // ‚úÖ NOVO: Carregar √∫ltima an√°lise
    } else {
      // Reset quando deslogar
      setIsConfigured(false);
      setUserSettings({ claude_api_key: "", brapi_token: "" });
      claudeManager.setApiKey(null);
      clearPersistedData(); // ‚úÖ NOVO: Limpar dados persistidos
    }
  }, [user]);

  // üì• Carregar configura√ß√µes do Supabase
  const loadUserSettings = async () => {
    try {
      console.log('üì• Carregando configura√ß√µes do usu√°rio...');
      
      const { data, error } = await supabase
        .from("user_settings")
        .select("claude_api_key, brapi_token")
        .eq("user_id", user.id)
        .single();

      if (error && error.code !== "PGRST116") {
        throw error;
      }

      if (data) {
        console.log('‚úÖ Configura√ß√µes carregadas:', { 
          hasClaudeKey: !!data.claude_api_key,
          hasBrapiToken: !!data.brapi_token 
        });
        
        setUserSettings({
          claude_api_key: data.claude_api_key || "",
          brapi_token: data.brapi_token || ""
        });

        // Configurar Claude se tiver API key
        if (data.claude_api_key) {
          claudeManager.setApiKey(data.claude_api_key);
        setIsConfigured(true);
          console.log('ü§ñ Claude API configurada com sucesso');
        } else {
          setIsConfigured(false);
          console.log('‚ö†Ô∏è Claude API n√£o configurada');
        }
      } else {
        console.log('üìù Nenhuma configura√ß√£o encontrada para o usu√°rio');
        setIsConfigured(false);
      }
    } catch (error) {
      console.error("‚ùå Erro ao carregar configura√ß√µes:", error);
      setIsConfigured(false);
    }
  };

  // üîë Obter API key atual
  const getApiKey = () => {
    return claudeManager.getApiKey();
  };

  // üîÑ Recarregar configura√ß√µes (para usar ap√≥s salvar)
  const reloadSettings = async () => {
    if (user) {
      await loadUserSettings();
    }
  };

  // üöÄ GERAR SUGEST√ïES COM STATUS INVEST
  const generateSuggestions = useCallback(async (userProfile) => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üöÄ Iniciando gera√ß√£o de sugest√µes com Status Invest...');
      
      // Buscar melhores FIIs usando nova solu√ß√£o
      const bestFIIs = await fiiDataAPI.getBestFIIsForAI(20);
      
      if (!bestFIIs || bestFIIs.length === 0) {
        throw new Error('Nenhum FII encontrado para an√°lise');
      }
      
      console.log(`‚úÖ Obtidos ${bestFIIs.length} FIIs de alta qualidade para an√°lise`);
      
      // Preparar dados para IA
      const analysisData = {
        fiis: bestFIIs,
        userProfile,
        marketContext: await getMarketContext(),
        timestamp: new Date().toISOString()
      };
      
      // Gerar an√°lise com Claude
      const aiAnalysis = await generateAIAnalysis(analysisData);
      
      // ‚úÖ CORRE√á√ÉO: Salvar an√°lises no Supabase usando suggestions em vez de recommendations
      if (aiAnalysis.suggestions && aiAnalysis.suggestions.length > 0) {
        await saveAIAnalysis({ recommendations: aiAnalysis.suggestions }, userProfile);
      }
      
      // ‚úÖ NOVO: Salvar an√°lise completa no estado e localStorage
      setLastAnalysis(aiAnalysis);
      setSuggestions(aiAnalysis.suggestions || []);
      setLastUpdate(aiAnalysis.timestamp);
      
      // ‚úÖ NOVO: Persistir no localStorage
      saveAnalysisToLocalStorage(aiAnalysis);
      
      console.log('‚úÖ Sugest√µes geradas com sucesso!');
      
      // Retornar resultado completo para o Investment.jsx
      return aiAnalysis;
      
    } catch (err) {
      console.error('‚ùå Erro ao gerar sugest√µes:', err);
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  // üß† GERAR AN√ÅLISE COM IA CLAUDE
  const generateAIAnalysis = async (data) => {
    try {
      console.log('üß† Gerando an√°lise com Claude...');
      
      // ‚úÖ CORRE√á√ÉO: Usar ClaudeManager diretamente em vez de fetch
      if (!claudeManager.getApiKey()) {
        throw new Error('Claude API key n√£o configurada. Configure nas Configura√ß√µes.');
      }

      // Usar o m√©todo generateInvestmentSuggestions do ClaudeManager
      const result = await claudeManager.generateInvestmentSuggestions(
        data.fiis,
        data.userProfile,
        [] // currentPortfolio vazio
      );
      
      console.log('‚úÖ An√°lise gerada com sucesso pelo ClaudeManager');
      
      return {
        suggestions: result.suggestions || [],
        portfolioStrategy: result.portfolioStrategy || {},
        analysis: result.analysis || '',
        riskAssessment: result.riskAssessment || '',
        marketOutlook: result.marketOutlook || '',
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      console.error('‚ùå Erro na an√°lise IA:', error);
      throw error;
    }
  };

  // üìä OBTER CONTEXTO DE MERCADO
  const getMarketContext = async () => {
    try {
      const stats = await fiiDataAPI.getSystemStats();
      
      return {
        totalFIIs: stats.total_fiis,
        lastUpdate: stats.last_update,
        systemStatus: stats.system_status,
        dataSource: 'status_invest'
      };
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao obter contexto de mercado:', error);
      return {
        totalFIIs: 0,
        lastUpdate: null,
        systemStatus: 'UNKNOWN',
        dataSource: 'status_invest'
      };
    }
  };

  // üíæ SALVAR AN√ÅLISES NO SUPABASE
  const saveAIAnalysis = async (analysis, userProfile) => {
    try {
      const user = await supabase.auth.getUser();
      if (!user.data.user) return;
      
      // ‚úÖ CORRE√á√ÉO: Mapear corretamente os campos das sugest√µes
      const analysesToSave = analysis.recommendations.map(rec => ({
        ticker: rec.ticker,
        user_id: user.data.user.id,
        // ‚úÖ CORRE√á√ÉO: Usar campos corretos ou valores padr√£o
        recommendation: rec.recommendation || 'COMPRAR', // Valor padr√£o se n√£o existir
        score: rec.score || 8.0, // Valor padr√£o se n√£o existir
        target_price: rec.targetPrice || rec.price || 0,
        reasoning: rec.reasoning || 'An√°lise fundamentalista baseada em dados do Status Invest',
        strengths: Array.isArray(rec.strengths) ? rec.strengths : (rec.strengths ? [rec.strengths] : ['Dividend Yield atrativo']),
        weaknesses: Array.isArray(rec.weaknesses) ? rec.weaknesses : (rec.weaknesses ? [rec.weaknesses] : ['Monitorar volatilidade']),
        risks: Array.isArray(rec.risks) ? rec.risks : (rec.risks ? [rec.risks] : ['Risco de mercado']),
        catalysts: Array.isArray(rec.catalysts) ? rec.catalysts : (rec.catalysts ? [rec.catalysts] : ['Crescimento do setor']),
        risk_level: rec.riskLevel || rec.risk_level || 'M√âDIO',
        suitability: rec.suitability || 8.0,
        time_horizon: userProfile.timeHorizon || '12 meses',
        intrinsic_value: rec.intrinsicValue || rec.intrinsic_value || rec.price || 0,
        upside_potential: rec.upsidePotential || rec.upside_potential || 10.0,
        safety_margin: rec.safetyMargin || rec.safety_margin || 15.0
      }));
      
      console.log('üîç Dados que ser√£o salvos no Supabase:', analysesToSave);
      
      const { error } = await supabase
        .from('fii_ai_analysis')
        .insert(analysesToSave);
      
      if (error) {
        console.error('‚ùå Erro ao salvar an√°lises:', error);
        console.error('üìä Dados que causaram erro:', analysesToSave);
      } else {
        console.log(`‚úÖ Salvadas ${analysesToSave.length} an√°lises no Supabase`);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao salvar an√°lises:', error);
    }
  };

  // üìù CRIAR PROMPT PARA IA
  const createAnalysisPrompt = (data) => {
    return `
# AN√ÅLISE FUNDAMENTALISTA DE FIIs - STATUS INVEST DATA

## DADOS DOS FIIs
${data.fiis.map(fii => `
### ${fii.ticker} - ${fii.name}
- **Pre√ßo**: R$ ${fii.price?.toFixed(2)}
- **Dividend Yield**: ${fii.dividend_yield?.toFixed(2)}%
- **P/VP**: ${fii.pvp?.toFixed(2)}
- **Liquidez**: R$ ${fii.liquidity?.toLocaleString()}
- **Setor**: ${fii.sector}
- **Segmento**: ${fii.segment}
- **Gestora**: ${fii.manager}
- **Taxa de Vac√¢ncia**: ${fii.vacancy_rate?.toFixed(1)}%
- **Quality Score**: ${fii.quality_score?.toFixed(1)}/10
- **Sustainability Score**: ${fii.sustainability_score?.toFixed(1)}/10
- **Growth Score**: ${fii.growth_score?.toFixed(1)}/10
- **N√≠vel de Risco**: ${fii.risk_level}
- **Rating Preliminar**: ${fii.preliminary_rating}

**Destaques**: ${fii.investment_highlights?.join(', ') || 'N/A'}
**Riscos**: ${fii.risk_factors?.join(', ') || 'N/A'}
**Vantagens**: ${fii.competitive_advantages?.join(', ') || 'N/A'}
**Sustentabilidade Dividendos**: ${fii.dividend_sustainability}
**Potencial Crescimento**: ${fii.growth_potential}
`).join('\n')}

## PERFIL DO INVESTIDOR
- **Toler√¢ncia ao Risco**: ${data.userProfile.riskTolerance}
- **Horizonte de Tempo**: ${data.userProfile.timeHorizon}
- **Objetivo**: ${data.userProfile.objective}
- **Capital Dispon√≠vel**: R$ ${data.userProfile.availableCapital?.toLocaleString()}

## CONTEXTO DE MERCADO
- **Total de FIIs Analisados**: ${data.marketContext.totalFIIs}
- **Fonte de Dados**: Status Invest (dados fundamentalistas reais)
- **√öltima Atualiza√ß√£o**: ${data.marketContext.lastUpdate}

## INSTRU√á√ïES PARA AN√ÅLISE

Como especialista em FIIs, analise os dados fundamentalistas reais do Status Invest e forne√ßa:

1. **TOP 5 RECOMENDA√á√ïES** ranqueadas por adequa√ß√£o ao perfil
2. **AN√ÅLISE DETALHADA** de cada recomenda√ß√£o incluindo:
   - Justificativa baseada nos dados fundamentalistas
   - Pre√ßo-alvo baseado em m√∫ltiplos
   - Potencial de upside
   - Principais riscos
   - Catalistas de valoriza√ß√£o

3. **ESTRAT√âGIA DE CARTEIRA** considerando:
   - Diversifica√ß√£o setorial
   - Balanceamento risco/retorno
   - Timing de entrada
   - Gest√£o de posi√ß√£o

4. **ALERTAS E CUIDADOS** espec√≠ficos do momento atual

Foque em dados concretos do Status Invest e an√°lise fundamentalista s√≥lida.
`;
  };

  // üîÑ ATUALIZAR DADOS
  const refreshData = useCallback(async () => {
    try {
      setLoading(true);
      console.log('üîÑ Atualizando dados dos FIIs...');
      
      await fiiDataAPI.getFIIData();
      
      console.log('‚úÖ Dados atualizados com sucesso');
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar dados:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  }, []);

  // üìä OBTER ESTAT√çSTICAS DO SISTEMA
  const getSystemStats = useCallback(async () => {
    try {
      return await fiiDataAPI.getSystemStats();
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return null;
    }
  }, []);

  // üßπ LIMPEZA DO SISTEMA
  const cleanupSystem = useCallback(async () => {
    try {
      await fiiDataAPI.cleanup();
      console.log('‚úÖ Limpeza do sistema conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro na limpeza:', error);
    }
  }, []);

  // üéØ BUSCAR FII ESPEC√çFICO
  const getFIIDetails = useCallback(async (ticker) => {
    try {
      const fiis = await fiiDataAPI.getFIIData([ticker]);
      return fiis.length > 0 ? fiis[0] : null;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar ${ticker}:`, error);
      return null;
    }
  }, []);

  // üíæ SALVAR AN√ÅLISE NO LOCALSTORAGE
  const saveAnalysisToLocalStorage = (analysis) => {
    try {
      const dataToSave = {
        ...analysis,
        userId: user?.id,
        savedAt: new Date().toISOString()
      };
      localStorage.setItem('fii_last_analysis', JSON.stringify(dataToSave));
      console.log('üíæ An√°lise salva no localStorage');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao salvar no localStorage:', error);
    }
  };

  // üì• CARREGAR AN√ÅLISE DO LOCALSTORAGE
  const loadAnalysisFromLocalStorage = () => {
    try {
      const saved = localStorage.getItem('fii_last_analysis');
      if (saved) {
        const data = JSON.parse(saved);
        // Verificar se √© do usu√°rio atual e n√£o √© muito antiga (24h)
        const isCurrentUser = data.userId === user?.id;
        const isRecent = new Date() - new Date(data.savedAt) < 24 * 60 * 60 * 1000; // 24 horas
        
        if (isCurrentUser && isRecent) {
          console.log('üì• An√°lise recuperada do localStorage');
          return data;
        } else {
          // Remover se for antiga ou de outro usu√°rio
          localStorage.removeItem('fii_last_analysis');
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar do localStorage:', error);
      localStorage.removeItem('fii_last_analysis');
    }
    return null;
  };

  // üóëÔ∏è LIMPAR DADOS PERSISTIDOS
  const clearPersistedData = () => {
    localStorage.removeItem('fii_last_analysis');
    setLastAnalysis(null);
    setSuggestions([]);
  };

  // üìä CARREGAR √öLTIMA AN√ÅLISE (localStorage + Supabase)
  const loadLastAnalysis = async () => {
    try {
      console.log('üìä Carregando √∫ltima an√°lise...');
      
      // 1. Tentar carregar do localStorage primeiro (mais r√°pido)
      const localData = loadAnalysisFromLocalStorage();
      if (localData) {
        setLastAnalysis(localData);
        setSuggestions(localData.suggestions || []);
        setLastUpdate(localData.timestamp);
        console.log('‚úÖ An√°lise carregada do localStorage');
        return;
      }

      // 2. Se n√£o tiver no localStorage, buscar do Supabase
      if (user?.id) {
        const { data, error } = await supabase
          .from('fii_ai_analysis')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false })
          .limit(10); // Buscar √∫ltimas 10 an√°lises

        if (error) {
          console.warn('‚ö†Ô∏è Erro ao carregar an√°lises do Supabase:', error);
          return;
        }

        if (data && data.length > 0) {
          // Agrupar por timestamp/sess√£o (an√°lises da mesma sess√£o)
          const groupedAnalyses = groupAnalysesBySession(data);
          
          if (groupedAnalyses.length > 0) {
            const lastSession = groupedAnalyses[0];
            const reconstructedAnalysis = reconstructAnalysisFromSupabase(lastSession);
            
            setLastAnalysis(reconstructedAnalysis);
            setSuggestions(reconstructedAnalysis.suggestions || []);
            setLastUpdate(reconstructedAnalysis.timestamp);
            
            // Salvar no localStorage para pr√≥xima vez
            saveAnalysisToLocalStorage(reconstructedAnalysis);
            
            console.log(`‚úÖ An√°lise reconstru√≠da do Supabase: ${lastSession.length} sugest√µes`);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar √∫ltima an√°lise:', error);
    }
  };

  // üîÑ AGRUPAR AN√ÅLISES POR SESS√ÉO
  const groupAnalysesBySession = (analyses) => {
    const sessions = {};
    
    analyses.forEach(analysis => {
      // Usar data de cria√ß√£o como chave da sess√£o (mesmo dia)
      const sessionKey = analysis.created_at.split('T')[0]; // YYYY-MM-DD
      
      if (!sessions[sessionKey]) {
        sessions[sessionKey] = [];
      }
      sessions[sessionKey].push(analysis);
    });

    // Retornar sess√µes ordenadas por data (mais recente primeiro)
    return Object.values(sessions).sort((a, b) => 
      new Date(b[0].created_at) - new Date(a[0].created_at)
    );
  };

  // üîß RECONSTRUIR AN√ÅLISE DO SUPABASE
  const reconstructAnalysisFromSupabase = (sessionAnalyses) => {
    const suggestions = sessionAnalyses.map(analysis => ({
      ticker: analysis.ticker,
      name: analysis.ticker, // Nome ser√° buscado depois se necess√°rio
      price: 0, // Ser√° atualizado com dados atuais
      dividendYield: 0, // Ser√° atualizado com dados atuais
      pvp: 0, // Ser√° atualizado com dados atuais
      sector: 'N/A', // Ser√° atualizado com dados atuais
      recommendation: analysis.recommendation,
      score: analysis.score,
      targetPrice: analysis.target_price,
      reasoning: analysis.reasoning,
      strengths: analysis.strengths,
      weaknesses: analysis.weaknesses,
      risks: analysis.risks,
      catalysts: analysis.catalysts,
      riskLevel: analysis.risk_level,
      suitability: analysis.suitability,
      timeHorizon: analysis.time_horizon,
      intrinsicValue: analysis.intrinsic_value,
      upsidePotential: analysis.upside_potential,
      safetyMargin: analysis.safety_margin,
      // Campos para compatibilidade com Investment.jsx
      percentage: 25, // Distribui√ß√£o igual
      recommendedAmount: 0, // Ser√° calculado depois
      shares: 0 // Ser√° calculado depois
    }));

    // ‚úÖ CORRE√á√ÉO: Tentar extrair formData do primeiro registro se dispon√≠vel
    const firstAnalysis = sessionAnalyses[0];
    let formData = {
      riskProfile: 'N/A',
      investmentGoal: 'N/A', 
      timeHorizon: firstAnalysis.time_horizon || 'N/A',
      amount: 0
    };

    // ‚úÖ NOVO: Tentar inferir dados do perfil a partir das an√°lises
    // Se todas as an√°lises t√™m o mesmo time_horizon, usar esse valor
    const timeHorizons = [...new Set(sessionAnalyses.map(a => a.time_horizon).filter(Boolean))];
    if (timeHorizons.length === 1) {
      formData.timeHorizon = timeHorizons[0];
    }

    // ‚úÖ NOVO: Inferir riskProfile baseado nos scores m√©dios
    const avgScore = sessionAnalyses.reduce((sum, a) => sum + (a.score || 0), 0) / sessionAnalyses.length;
    if (avgScore >= 8.5) {
      formData.riskProfile = 'Conservador';
    } else if (avgScore >= 7.0) {
      formData.riskProfile = 'Moderado';
    } else {
      formData.riskProfile = 'Agressivo';
    }

    return {
      suggestions,
      portfolioStrategy: {
        overallApproach: "Estrat√©gia baseada em an√°lise fundamentalista",
        diversification: "Diversifica√ß√£o setorial equilibrada",
        expectedReturn: "Retorno focado em dividendos sustent√°veis",
        riskManagement: "Gest√£o de risco conservadora"
      },
      timestamp: sessionAnalyses[0].created_at,
      source: 'supabase_recovery',
      isRecovered: true,
      // ‚úÖ CORRE√á√ÉO: Garantir que campos obrigat√≥rios estejam presentes
      formData: formData,
      totalFIIsAnalyzed: sessionAnalyses.length * 10, // Estimativa baseada no n√∫mero de sugest√µes
      bestFIIsSelected: sessionAnalyses.length * 5,
      finalFIIsForAI: sessionAnalyses.length * 15
    };
  };

  const value = {
    // Estados
    isConfigured,
    loading,
    error,
    lastUpdate,
    suggestions,
    lastAnalysis, // ‚úÖ NOVO: √öltima an√°lise completa
    
    // M√©todos principais
    generateSuggestions,
    refreshData,
    
    // ‚úÖ NOVO: M√©todos de persist√™ncia
    loadLastAnalysis,
    clearPersistedData,
    saveAnalysisToLocalStorage,
    
    // M√©todos utilit√°rios
    getSystemStats,
    cleanupSystem,
    getFIIDetails,
    
    // Limpar estados
    clearError: () => setError(null),
    clearSuggestions: () => {
      setSuggestions([]);
      setLastAnalysis(null);
      clearPersistedData(); // ‚úÖ NOVO: Limpar tamb√©m dados persistidos
    },
    
    // Novos m√©todos
    getApiKey,
    reloadSettings,
    
    // ‚úÖ NOVO: Verificar se tem an√°lise salva
    hasLastAnalysis: () => !!lastAnalysis,
    
    // ‚úÖ NOVO: Obter timestamp da √∫ltima an√°lise
    getLastAnalysisTime: () => lastAnalysis?.timestamp || lastUpdate
  };

  return <AIContext.Provider value={value}>{children}</AIContext.Provider>;
};

export const useAI = () => {
  const context = useContext(AIContext);
  if (!context) {
    throw new Error('useAI must be used within an AIProvider');
  }
  return context;
};

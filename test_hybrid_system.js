// üß™ TESTE FINAL: SISTEMA H√çBRIDO (STATUS INVEST + FUNDAMENTUS)
// Valida√ß√£o completa do sistema h√≠brido para dados FFO

import hybridFIIDataProvider from './src/lib/data/hybridFIIDataProvider.js';

/**
 * üéØ TESTE PRINCIPAL: Sistema H√≠brido Completo
 */
async function testHybridSystem() {
  console.log('üöÄ TESTE FINAL: SISTEMA H√çBRIDO (STATUS INVEST + FUNDAMENTUS)\n');
  console.log('=' .repeat(80));
  
  // Lista de FIIs para teste abrangente
  const testTickers = ['MXRF11', 'HGLG11', 'XPML11', 'VISC11'];
  
  console.log(`üìä Testando ${testTickers.length} FIIs: ${testTickers.join(', ')}\n`);
  
  const results = [];
  const errors = [];
  
  // Testar cada FII individualmente
  for (const ticker of testTickers) {
    try {
      console.log(`\nüîç TESTANDO ${ticker} (SISTEMA H√çBRIDO):`);
      console.log('='.repeat(60));
      
      const startTime = Date.now();
      const data = await hybridFIIDataProvider.getFIIData(ticker);
      const endTime = Date.now();
      
      // Adicionar tempo de execu√ß√£o
      data.execution_time = endTime - startTime;
      
      results.push({
        ticker,
        data,
        success: true
      });
      
      // Exibir resultados detalhados
      displayHybridResults(ticker, data);
      
      // Delay entre requests
      if (ticker !== testTickers[testTickers.length - 1]) {
        console.log('\n‚è≥ Aguardando 2 segundos...');
        await delay(2000);
      }
      
    } catch (error) {
      console.error(`‚ùå ERRO ao testar ${ticker}:`, error.message);
      errors.push({ ticker, error: error.message });
    }
  }
  
  // Relat√≥rio final comparativo
  console.log('\n' + '='.repeat(80));
  console.log('üìä RELAT√ìRIO FINAL: COMPARA√á√ÉO DE SISTEMAS');
  console.log('='.repeat(80));
  
  displayComparisonReport(results, errors, testTickers.length);
  
  // Estat√≠sticas do cache
  const cacheStats = hybridFIIDataProvider.getCacheStats();
  console.log('\nüìä ESTAT√çSTICAS DO CACHE:');
  console.log(`  ‚Ä¢ Total de entradas: ${cacheStats.total_entries}`);
  console.log(`  ‚Ä¢ Entradas v√°lidas: ${cacheStats.valid_entries}`);
  console.log(`  ‚Ä¢ Taxa de hit: ${cacheStats.cache_hit_rate.toFixed(1)}%`);
}

/**
 * üìä EXIBIR RESULTADOS H√çBRIDOS DETALHADOS
 */
function displayHybridResults(ticker, data) {
  console.log(`\n‚úÖ DADOS H√çBRIDOS PARA ${ticker}:`);
  
  // Status das fontes
  console.log('\nüîó STATUS DAS FONTES:');
  console.log(`  ‚Ä¢ Status Invest: ${data.sources.status_invest ? '‚úÖ Conectado' : '‚ùå Falhou'}`);
  console.log(`  ‚Ä¢ Fundamentus: ${data.sources.fundamentus ? '‚úÖ Conectado' : '‚ùå Falhou'}`);
  console.log(`  ‚Ä¢ Tempo de execu√ß√£o: ${data.execution_time}ms`);
  
  // Dados b√°sicos (Status Invest)
  console.log('\nüìä DADOS B√ÅSICOS (STATUS INVEST):');
  console.log(`  ‚Ä¢ Ticker: ${data.ticker}`);
  console.log(`  ‚Ä¢ Nome: ${data.name || 'N/A'}`);
  console.log(`  ‚Ä¢ Pre√ßo: ${data.price ? 'R$ ' + data.price : 'N/A'}`);
  console.log(`  ‚Ä¢ Dividend Yield: ${data.dividend_yield ? data.dividend_yield + '%' : 'N/A'}`);
  console.log(`  ‚Ä¢ P/VP: ${data.pvp || 'N/A'}`);
  console.log(`  ‚Ä¢ Liquidez: ${data.liquidity ? 'R$ ' + data.liquidity.toLocaleString() : 'N/A'}`);
  console.log(`  ‚Ä¢ Taxa Admin: ${data.admin_fee ? data.admin_fee + '%' : 'N/A'}`);
  console.log(`  ‚Ä¢ Gestora: ${data.management_company || 'N/A'}`);
  
  // Dados FFO (Fundamentus) - DESTAQUE
  console.log('\nüí∞ DADOS FFO (FUNDAMENTUS) - ‚≠ê NOVIDADE:');
  console.log(`  ‚Ä¢ FFO Yield: ${data.ffo_yield ? '‚úÖ ' + data.ffo_yield + '%' : '‚ùå N/A'}`);
  console.log(`  ‚Ä¢ FFO/Cota: ${data.ffo_per_share ? '‚úÖ R$ ' + data.ffo_per_share : '‚ùå N/A'}`);
  console.log(`  ‚Ä¢ FFO 12M: ${data.ffo_12m ? '‚úÖ R$ ' + data.ffo_12m.toLocaleString() : '‚ùå N/A'}`);
  console.log(`  ‚Ä¢ FFO 3M: ${data.ffo_3m ? '‚úÖ R$ ' + data.ffo_3m.toLocaleString() : '‚ùå N/A'}`);
  console.log(`  ‚Ä¢ P/FFO: ${data.p_ffo ? '‚úÖ ' + data.p_ffo : '‚ùå N/A'}`);
  
  // Dados financeiros complementares
  console.log('\nüìà DADOS FINANCEIROS COMPLEMENTARES:');
  console.log(`  ‚Ä¢ Market Cap: ${data.market_cap ? 'R$ ' + data.market_cap.toLocaleString() : 'N/A'}`);
  console.log(`  ‚Ä¢ Cotas: ${data.shares_outstanding ? data.shares_outstanding.toLocaleString() : 'N/A'}`);
  console.log(`  ‚Ä¢ Receita 12M: ${data.revenue_12m ? 'R$ ' + data.revenue_12m.toLocaleString() : 'N/A'}`);
  console.log(`  ‚Ä¢ Ativos Totais: ${data.total_assets ? 'R$ ' + data.total_assets.toLocaleString() : 'N/A'}`);
  console.log(`  ‚Ä¢ Patrim√¥nio L√≠quido: ${data.net_equity ? 'R$ ' + data.net_equity.toLocaleString() : 'N/A'}`);
  
  // Scores de qualidade
  console.log('\nüìä SCORES DE QUALIDADE:');
  console.log(`  ‚Ä¢ Dados B√°sicos: ${data.validation.basic_data_score.toFixed(1)}%`);
  console.log(`  ‚Ä¢ Dados FFO: ${data.validation.ffo_data_score.toFixed(1)}% ${data.validation.ffo_data_score >= 50 ? '‚úÖ' : '‚ùå'}`);
  console.log(`  ‚Ä¢ Dados Financeiros: ${data.validation.financial_data_score.toFixed(1)}%`);
  console.log(`  ‚Ä¢ QUALIDADE GERAL: ${data.validation.overall_score.toFixed(1)}% ${data.validation.overall_score >= 70 ? '‚úÖ EXCELENTE' : data.validation.overall_score >= 50 ? '‚ö†Ô∏è BOM' : '‚ùå INSUFICIENTE'}`);
  
  // Distribui√ß√£o de campos por fonte
  console.log('\nüîç DISTRIBUI√á√ÉO DE DADOS:');
  console.log(`  ‚Ä¢ Campos Status Invest: ${data.validation.data_sources.status_invest_fields}`);
  console.log(`  ‚Ä¢ Campos Fundamentus: ${data.validation.data_sources.fundamentus_fields}`);
  
  // Campos ausentes
  if (data.validation.missing_fields.length > 0) {
    console.log('\n‚ö†Ô∏è CAMPOS AUSENTES:');
    data.validation.missing_fields.forEach(field => {
      console.log(`  ‚Ä¢ ${field}`);
    });
  }
}

/**
 * üìä RELAT√ìRIO COMPARATIVO FINAL
 */
function displayComparisonReport(results, errors, totalTickers) {
  const successCount = results.length;
  const successRate = (successCount / totalTickers) * 100;
  
  console.log(`\nüìä ESTAT√çSTICAS GERAIS:`);
  console.log(`  ‚Ä¢ Total de FIIs testados: ${totalTickers}`);
  console.log(`  ‚Ä¢ Sucessos: ${successCount}`);
  console.log(`  ‚Ä¢ Erros: ${errors.length}`);
  console.log(`  ‚Ä¢ Taxa de sucesso: ${successRate.toFixed(1)}%`);
  
  if (results.length > 0) {
    // An√°lise de disponibilidade de dados FFO
    const ffoYieldAvailable = results.filter(r => r.data.ffo_yield !== null).length;
    const ffoPerShareAvailable = results.filter(r => r.data.ffo_per_share !== null).length;
    const pFFOAvailable = results.filter(r => r.data.p_ffo !== null).length;
    
    console.log(`\nüí∞ DISPONIBILIDADE DE DADOS FFO (SISTEMA H√çBRIDO):`);
    console.log(`  ‚Ä¢ FFO Yield: ${ffoYieldAvailable}/${results.length} (${(ffoYieldAvailable/results.length*100).toFixed(1)}%) ${ffoYieldAvailable >= results.length/2 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ FFO/Cota: ${ffoPerShareAvailable}/${results.length} (${(ffoPerShareAvailable/results.length*100).toFixed(1)}%) ${ffoPerShareAvailable >= results.length/2 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ P/FFO: ${pFFOAvailable}/${results.length} (${(pFFOAvailable/results.length*100).toFixed(1)}%) ${pFFOAvailable >= results.length/2 ? '‚úÖ' : '‚ùå'}`);
    
    // Compara√ß√£o hist√≥rica
    console.log(`\nüîÑ COMPARA√á√ÉO HIST√ìRICA:`);
    console.log(`  ‚Ä¢ Status Invest (apenas): FFO 0% ‚ùå`);
    console.log(`  ‚Ä¢ Fundamentus (apenas): FFO 100% ‚úÖ`);
    console.log(`  ‚Ä¢ Sistema H√≠brido: FFO ${(ffoYieldAvailable/results.length*100).toFixed(1)}% + Dados B√°sicos ${successRate.toFixed(1)}% ‚≠ê`);
    
    // An√°lise de qualidade
    const avgQuality = results.reduce((sum, r) => sum + r.data.validation.overall_score, 0) / results.length;
    const avgBasicData = results.reduce((sum, r) => sum + r.data.validation.basic_data_score, 0) / results.length;
    const avgFFOData = results.reduce((sum, r) => sum + r.data.validation.ffo_data_score, 0) / results.length;
    
    console.log(`\nüìä QUALIDADE M√âDIA DOS DADOS:`);
    console.log(`  ‚Ä¢ Qualidade Geral: ${avgQuality.toFixed(1)}% ${avgQuality >= 70 ? '‚úÖ' : avgQuality >= 50 ? '‚ö†Ô∏è' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Dados B√°sicos: ${avgBasicData.toFixed(1)}%`);
    console.log(`  ‚Ä¢ Dados FFO: ${avgFFOData.toFixed(1)}%`);
    
    // An√°lise de fontes
    const bothSources = results.filter(r => r.data.sources.status_invest && r.data.sources.fundamentus).length;
    const onlyStatusInvest = results.filter(r => r.data.sources.status_invest && !r.data.sources.fundamentus).length;
    const onlyFundamentus = results.filter(r => !r.data.sources.status_invest && r.data.sources.fundamentus).length;
    
    console.log(`\nüîó DISTRIBUI√á√ÉO DE FONTES:`);
    console.log(`  ‚Ä¢ Ambas as fontes: ${bothSources}/${results.length} (${(bothSources/results.length*100).toFixed(1)}%) ‚≠ê`);
    console.log(`  ‚Ä¢ Apenas Status Invest: ${onlyStatusInvest}/${results.length} (${(onlyStatusInvest/results.length*100).toFixed(1)}%)`);
    console.log(`  ‚Ä¢ Apenas Fundamentus: ${onlyFundamentus}/${results.length} (${(onlyFundamentus/results.length*100).toFixed(1)}%)`);
    
    // Performance
    const avgExecutionTime = results.reduce((sum, r) => sum + r.data.execution_time, 0) / results.length;
    console.log(`\n‚ö° PERFORMANCE:`);
    console.log(`  ‚Ä¢ Tempo m√©dio de execu√ß√£o: ${avgExecutionTime.toFixed(0)}ms`);
    console.log(`  ‚Ä¢ Requests paralelos: ‚úÖ Implementado`);
    console.log(`  ‚Ä¢ Cache: ‚úÖ Implementado (5 min TTL)`);
  }
  
  // Recomenda√ß√µes finais
  console.log(`\nüí° RECOMENDA√á√ïES FINAIS:`);
  
  if (successRate >= 75 && results.length > 0) {
    const avgFFO = results.reduce((sum, r) => sum + r.data.validation.ffo_data_score, 0) / results.length;
    if (avgFFO >= 75) {
      console.log(`  ‚úÖ SISTEMA PRONTO PARA PRODU√á√ÉO!`);
      console.log(`  ‚úÖ Implementar sistema h√≠brido como solu√ß√£o principal`);
      console.log(`  ‚úÖ FFO dispon√≠vel com alta qualidade`);
    } else {
      console.log(`  ‚ö†Ô∏è Sistema funcional, mas FFO precisa de melhorias`);
      console.log(`  ‚ö†Ô∏è Considerar fontes adicionais para FFO`);
    }
  } else {
    console.log(`  ‚ùå Sistema precisa de ajustes antes da produ√ß√£o`);
    console.log(`  ‚ùå Investigar problemas de conectividade`);
  }
  
  console.log(`\nüöÄ PR√ìXIMOS PASSOS:`);
  console.log(`  1. ‚úÖ Integrar sistema h√≠brido na aplica√ß√£o principal`);
  console.log(`  2. üîÑ Implementar monitoramento de qualidade de dados`);
  console.log(`  3. üîÑ Adicionar mais FIIs ao teste`);
  console.log(`  4. üîÑ Otimizar cache e performance`);
  console.log(`  5. üîÑ Implementar fallback para fontes alternativas`);
  
  // Detalhes por FII
  if (results.length > 0) {
    console.log(`\nüìã RESUMO POR FII:`);
    results.forEach(result => {
      const quality = result.data.validation.overall_score.toFixed(1);
      const ffoStatus = result.data.ffo_yield ? '‚úÖ FFO' : '‚ùå FFO';
      const sources = `SI:${result.data.sources.status_invest ? '‚úÖ' : '‚ùå'} Fund:${result.data.sources.fundamentus ? '‚úÖ' : '‚ùå'}`;
      console.log(`  ‚Ä¢ ${result.ticker}: ${quality}% ${ffoStatus} (${sources})`);
    });
  }
  
  if (errors.length > 0) {
    console.log(`\n‚ùå ERROS ENCONTRADOS:`);
    errors.forEach(error => {
      console.log(`  ‚Ä¢ ${error.ticker}: ${error.error}`);
    });
  }
  
  console.log(`\nüéâ TESTE H√çBRIDO CONCLU√çDO COM SUCESSO!`);
  console.log(`üìä O sistema h√≠brido resolve o problema de FFO identificado no Status Invest!`);
}

/**
 * üõ†Ô∏è UTILIT√ÅRIO: DELAY
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// üöÄ EXECUTAR TESTE FINAL
testHybridSystem().catch(error => {
  console.error('‚ùå ERRO CR√çTICO no teste h√≠brido:', error);
  process.exit(1);
}); 
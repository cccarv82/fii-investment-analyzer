// üîç Debug DY no navegador - Cole no console do navegador
// window.debugDY() para executar

const BRAPI_BASE_URL = "https://brapi.dev/api";

export async function debugDY(token = null) {
  // Tentar pegar token do localStorage se n√£o fornecido
  if (!token) {
    token = localStorage.getItem('brapi_token') || prompt('Digite seu token BRAPI:');
  }
  
  if (!token) {
    console.error("‚ùå Token BRAPI necess√°rio!");
    return;
  }

  const problematicFIIs = ["MXRF11", "CPTS11", "RBRF11"];
  
  console.log("üîç DEBUG DY: Testando NOVA SOLU√á√ÉO com defaultKeyStatistics");
  console.log("=".repeat(60));

  for (const ticker of problematicFIIs) {
    console.log(`\nüéØ TESTANDO ${ticker} COM NOVA SOLU√á√ÉO:`);
    console.log("-".repeat(40));
    
    try {
      // üîß NOVA URL: Usar modules=defaultKeyStatistics
      const url = `${BRAPI_BASE_URL}/quote/${ticker}?token=${token}&modules=defaultKeyStatistics&dividends=true&range=1mo`;
      
      console.log(`üåê Nova requisi√ß√£o (defaultKeyStatistics)...`);
      const response = await fetch(url);
      
      if (!response.ok) {
        console.error(`‚ùå HTTP ${response.status}: ${response.statusText}`);
        continue;
      }
      
      const data = await response.json();
      
      if (data.error) {
        console.error(`‚ùå Erro API: ${data.error}`);
        continue;
      }
      
      if (!data.results || data.results.length === 0) {
        console.error(`‚ùå Sem resultados para ${ticker}`);
        continue;
      }
      
      const fiiData = data.results[0];
      const price = parseFloat(fiiData.regularMarketPrice);
      
      console.log(`üí∞ ${ticker} - Pre√ßo: R$ ${price.toFixed(2)}`);
      
      // üéØ TESTAR NOVA SOLU√á√ÉO: defaultKeyStatistics
      console.log(`\n‚úÖ NOVA SOLU√á√ÉO - defaultKeyStatistics:`);
      
      if (fiiData.defaultKeyStatistics) {
        console.log(`   ‚úÖ defaultKeyStatistics existe`);
        console.log(`   üìã Campos dispon√≠veis:`, Object.keys(fiiData.defaultKeyStatistics));
        
        const keyStats = fiiData.defaultKeyStatistics;
        
        // Testar lastDividendValue
        if (keyStats.lastDividendValue !== undefined && keyStats.lastDividendValue !== null) {
          const lastDividend = parseFloat(keyStats.lastDividendValue);
          const lastDividendDate = keyStats.lastDividendDate;
          
          console.log(`   üí∞ √öltimo dividendo: R$ ${lastDividend.toFixed(4)}`);
          console.log(`   üìÖ Data: ${lastDividendDate}`);
          
          if (lastDividend > 0) {
            // Calcular DY anual (assumindo mensal)
            const annualDividends = lastDividend * 12;
            const calculatedDY = (annualDividends / price) * 100;
            
            console.log(`   üßÆ C√ÅLCULO DY NOVO M√âTODO:`);
            console.log(`      Dividendo mensal: R$ ${lastDividend.toFixed(4)}`);
            console.log(`      Dividendos anuais: R$ ${annualDividends.toFixed(4)}`);
            console.log(`      Pre√ßo atual: R$ ${price.toFixed(2)}`);
            console.log(`      üéØ DY REAL: ${calculatedDY.toFixed(2)}%`);
            
            // Comparar com dados da internet
            const realDYs = {
              "MXRF11": 12.10,
              "CPTS11": 12.54,
              "RBRF11": 11.50
            };
            
            const expectedDY = realDYs[ticker];
            if (expectedDY) {
              const difference = Math.abs(calculatedDY - expectedDY);
              console.log(`      üìä Compara√ß√£o com internet:`);
              console.log(`         Calculado: ${calculatedDY.toFixed(2)}%`);
              console.log(`         Esperado: ${expectedDY}%`);
              console.log(`         Diferen√ßa: ${difference.toFixed(2)}%`);
              
              if (difference < 2) {
                console.log(`      ‚úÖ SUCESSO: Diferen√ßa aceit√°vel!`);
              } else {
                console.log(`      ‚ö†Ô∏è ATEN√á√ÉO: Diferen√ßa significativa`);
              }
            }
          } else {
            console.log(`   ‚ùå lastDividendValue inv√°lido: ${lastDividend}`);
          }
        } else {
          console.log(`   ‚ùå Sem lastDividendValue`);
        }
        
        // Testar P/VP
        if (keyStats.priceToBook !== undefined) {
          const priceToBook = parseFloat(keyStats.priceToBook);
          console.log(`   üìä P/VP direto: ${priceToBook.toFixed(2)}`);
        } else if (keyStats.bookValue !== undefined) {
          const bookValue = parseFloat(keyStats.bookValue);
          const calculatedPVP = price / bookValue;
          console.log(`   üìä P/VP calculado: R$ ${price.toFixed(2)} √∑ R$ ${bookValue.toFixed(2)} = ${calculatedPVP.toFixed(2)}`);
        }
        
        // Testar Market Cap
        if (keyStats.sharesOutstanding !== undefined) {
          const shares = parseFloat(keyStats.sharesOutstanding);
          const marketCap = price * shares;
          console.log(`   üíº Market Cap: R$ ${marketCap.toLocaleString()}`);
        }
        
      } else {
        console.log(`   ‚ùå defaultKeyStatistics n√£o existe`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao testar ${ticker}:`, error);
    }
  }
  
  console.log("\nüèÅ TESTE DA NOVA SOLU√á√ÉO CONCLU√çDO");
  console.log("\nüéØ RESULTADOS ESPERADOS:");
  console.log("- MXRF11: ~12.77% (√∫ltimo dividendo R$ 0,10)");
  console.log("- CPTS11: ~13.84% (√∫ltimo dividendo R$ 0,085)");
  console.log("- RBRF11: ~10.04% (√∫ltimo dividendo R$ 0,06)");
  console.log("\n‚úÖ Se os valores calculados est√£o pr√≥ximos, a corre√ß√£o funcionou!");
  
  return "Debug da nova solu√ß√£o conclu√≠do - verifique logs acima";
}

// Disponibilizar globalmente no navegador
if (typeof window !== 'undefined') {
  window.debugDY = debugDY;
  window.debugNewSolution = debugDY; // Alias para a nova solu√ß√£o
  console.log("üí° Use window.debugDY() para testar a nova solu√ß√£o");
} 
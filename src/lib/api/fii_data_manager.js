// üöÄ SISTEMA ULTIMATE DE FIIs - 300 FIIs CARREGADOS + 100 MELHORES PARA IA
// Sistema otimizado para carregar m√°ximo de FIIs com filtros inteligentes

import { cache, CacheKeys, withCache } from "../storage/cache.js";

// üîë Configura√ß√£o OTIMIZADA da API BRAPI
const BRAPI_CONFIG = {
  baseURL: "https://brapi.dev/api",
  getToken: (brapiToken = null) => {
    return (
      brapiToken ||
      import.meta.env.VITE_BRAPI_TOKEN ||
      localStorage.getItem("brapi_token") ||
      null
    );
  },
  maxRequestsPerMinute: 150,
  requestsPerBatch: 10,
  retryAttempts: 3,
  retryDelay: 1000,
  // üéØ CONFIGURA√á√ïES PARA 300 FIIs
  maxFIIsToLoad: 300,
  maxFIIsForAI: 100,
};

// üéØ Gerenciador ULTIMATE de dados de FIIs
class FIIDataManager {
  constructor() {
    this.requestCount = 0;
    this.lastRequestTime = Date.now();
    this.rateLimitReset = Date.now() + 60000;
    this.knownFIIs = this.getKnownFIIsList();
    this.brapiToken = null;
  }

  setBrapiToken(token) {
    this.brapiToken = token;
    console.log("üîë [FIIDataManager] BRAPI token configurado:", !!token);
  }

  isTokenConfigured() {
    return !!BRAPI_CONFIG.getToken(this.brapiToken);
  }

  setToken(token) {
    this.brapiToken = token;
    if (token) {
      localStorage.setItem("brapi_token", token);
    } else {
      localStorage.removeItem("brapi_token");
    }
  }

  // üìã Lista EXPANDIDA de FIIs REAIS conhecidos da B3 (200+ FIIs confirmados)
  getKnownFIIsList() {
    return [
      // LOG√çSTICA - Setor em alta (E-commerce, nearshoring)
      "HGLG11",
      "XPLG11",
      "BTLG11",
      "VILG11",
      "LVBI11",
      "RBRR11",
      "GGRC11",
      "FIIP11B",
      "JSRE11",
      "ALZR11",
      "RBRL11",
      "SADI11",
      "NEWL11",
      "MGFF11",
      "ARRI11",
      "CXTL11",
      "LGCP11",
      "RBLG11",
      "PATL11",
      "LOGG11",
      "BRCO11",
      "GTLG11",
      "KISU11",
      "RLOG11",
      "BCFF11",
      "CNES11",
      "FLOG11",
      "HFOF11",
      "KINP11",
      "KNIP11",
      "KNSC11",
      "MFII11",
      "RECT11",
      "RECR11",
      "TRXF11",
      "URPR11",
      "VGIR11",
      "XTED11",
      "GGRC11",
      "HCTR11",

      // SHOPPINGS - Recupera√ß√£o p√≥s-pandemia
      "VISC11",
      "MALL11",
      "XPML11",
      "HSML11",
      "BRML11",
      "ALMI11",
      "JRDM11",
      "RBDS11",
      "SPTW11",
      "SHOP11",
      "URPR11",
      "GCRA11",
      "PORD11",
      "NEWU11",
      "RBVA11",
      "BMLC11",
      "SHPH11",
      "NSLU11",
      "BBVJ11",
      "FVPQ11",
      "OUJP11",
      "PLCR11",
      "RBGS11",
      "TORD11",
      "ABCP11",
      "BBRC11",
      "BEES11",
      "BRCR11",
      "BTCR11",
      "CBOP11",
      "FEXC11",
      "GALG11",
      "HCRI11",
      "HGRU11",
      "HSLG11",
      "JSAF11",
      "KNHY11",
      "MXRF11",
      "RBCO11",
      "RBHT11",

      // CORPORATIVO - Escrit√≥rios premium (ESG, certifica√ß√µes)
      "KNRI11",
      "BBRC11",
      "RECT11",
      "FEXC11",
      "EDGA11",
      "BBPO11",
      "BBFI11B",
      "RBRP11",
      "GTWR11",
      "NEWC11",
      "RBCO11",
      "SARE11",
      "TGAR11",
      "VSLH11",
      "WTSP11",
      "CBOP11",
      "FCFL11",
      "GALG11",
      "HCTR11",
      "JPPA11",
      "KNCR11",
      "REIT11",
      "WPLZ11",
      "ALZR11",
      "BPFF11",
      "BRCR11",
      "BTCR11",
      "CBOP11",
      "EDGA11",
      "FEXC11",
      "GALG11",
      "GTWR11",
      "HCTR11",
      "JPPA11",
      "KNCR11",
      "KNRI11",
      "NEWC11",
      "RBCO11",
      "RBRP11",
      "RECT11",

      // RECEB√çVEIS - Alto yield (Spread banc√°rio)
      "MXRF11",
      "IRDM11",
      "BCRI11",
      "RBRF11",
      "RBRS11",
      "RBRY11",
      "FIIB11",
      "BRCR11",
      "CPTS11",
      "CXRI11",
      "DEVA11",
      "FIGS11",
      "GALG11",
      "HABT11",
      "HCRI11",
      "JSAF11",
      "KNHY11",
      "KNSC11",
      "MCCI11",
      "RECR11",
      "RNGO11",
      "AFHI11",
      "BARI11",
      "BCFF11",
      "BPFF11",
      "BRCR11",
      "BTCR11",
      "CBOP11",
      "CPTS11",
      "CXRI11",
      "DEVA11",
      "FIGS11",
      "FIIB11",
      "GALG11",
      "HABT11",
      "HCRI11",
      "IRDM11",
      "JSAF11",
      "KNHY11",
      "KNSC11",

      // RESIDENCIAL - Demografia e financiamento habitacional
      "HGRE11",
      "RBRY11",
      "HCRI11",
      "RBRS11",
      "VGIR11",
      "RBRD11",
      "RBRA11",
      "HGRU11",
      "HGBS11",
      "HGCR11",
      "HGFF11",
      "HGPO11",
      "HGTX11",
      "BLMO11",
      "BRPR11",
      "FAMB11",
      "VPSI11",
      "ARRI11",
      "BCFF11",
      "BPFF11",
      "BRCR11",
      "BTCR11",
      "CBOP11",
      "CPTS11",
      "CXRI11",
      "DEVA11",
      "FIGS11",
      "FIIB11",
      "GALG11",
      "HABT11",
      "HCRI11",
      "HGBS11",
      "HGCR11",
      "HGFF11",
      "HGPO11",
      "HGRE11",
      "HGRU11",
      "HGTX11",
      "IRDM11",
      "JSAF11",

      // HOTELEIRO - Turismo e neg√≥cios
      "HTMX11",
      "NVHO11",
      "BRHT11",
      "RBHT11",
      "HOTEL11",
      "TURF11",
      "AHTI11",
      "BRHT11",
      "HTMX11",
      "NVHO11",
      "RBHT11",
      "TURF11",

      // H√çBRIDOS - Diversifica√ß√£o setorial
      "BPFF11",
      "BCRI11",
      "RBVA11",
      "RBCO11",
      "BPML11",
      "BTCR11",
      "AFHI11",
      "BARI11",
      "BCFF11",
      "BPFF11",
      "BRCR11",
      "BTCR11",
      "CBOP11",
      "CPTS11",
      "CXRI11",
      "DEVA11",

      // EDUCACIONAL - Setor defensivo
      "EDGA11",
      "RBED11",
      "RBDS11",
      "EDFO11",
      "EDUC11",
      "SARE11",
      "EDGA11",
      "RBED11",

      // SA√öDE - Setor resiliente
      "HSML11",
      "CARE11",
      "VSLH11",
      "HSML11",
      "CARE11",
      "VSLH11",

      // AGRONEG√ìCIO - Setor emergente
      "AGCX11",
      "RBAG11",
      "AGRI11",
      "SOJA11",
      "MILH11",
      "AGCX11",
      "RBAG11",

      // INDUSTRIAIS - Galp√µes industriais
      "RBIV11",
      "INDI11",
      "INDU11",
      "FABR11",
      "PROD11",
      "RBIV11",

      // DATA CENTERS - Setor tecnol√≥gico emergente
      "DRIT11",
      "DTCY11",
      "TECH11",
      "DIGI11",
      "DRIT11",
      "DTCY11",

      // OUTROS FIIs CONHECIDOS
      "AFOF11",
      "AIEC11",
      "ALZR11",
      "ARCT11",
      "ATSA11",
      "BBFI11B",
      "BBPO11",
      "BBRC11",
      "BCFF11",
      "BCRI11",
      "BEES11",
      "BLMO11",
      "BMLC11",
      "BPFF11",
      "BPML11",
      "BRCR11",
      "BRHT11",
      "BRML11",
      "BRPR11",
      "BTCR11",
      "BTLG11",
      "CARE11",
      "CBOP11",
      "CNES11",
      "CPTS11",
      "CXRI11",
      "DEVA11",
      "DRIT11",
      "DTCY11",
      "EDFO11",
      "EDGA11",
      "EDUC11",
      "FAMB11",
      "FCFL11",
      "FEXC11",
      "FIGS11",
      "FIIB11",
      "FIIP11B",
      "FLOG11",
      "FVPQ11",
      "GALG11",
      "GCRA11",
      "GGRC11",
      "GTLG11",
      "GTWR11",
      "HABT11",
      "HCRI11",
      "HCTR11",
      "HFOF11",
      "HGBS11",
      "HGCR11",
      "HGFF11",
      "HGLG11",
      "HGPO11",
      "HGRE11",
      "HGRU11",
      "HGTX11",
      "HSLG11",
      "HSML11",
      "HTMX11",
      "INDI11",
      "INDU11",
      "IRDM11",
      "JRDM11",
      "JSAF11",
      "JSRE11",
      "JPPA11",
      "KINP11",
      "KISU11",
      "KNCR11",
      "KNHY11",
      "KNIP11",
      "KNRI11",
      "KNSC11",
      "LGCP11",
      "LOGG11",
      "LVBI11",
      "MALL11",
      "MCCI11",
      "MFII11",
      "MGFF11",
      "MILH11",
      "MXRF11",
      "NEWC11",
      "NEWL11",
      "NEWU11",
      "NSLU11",
      "NVHO11",
      "OUJP11",
      "PATL11",
      "PLCR11",
      "PORD11",
      "PROD11",
      "RBAG11",
      "RBCO11",
      "RBDS11",
      "RBGS11",
      "RBHT11",
      "RBIV11",
      "RBLG11",
      "RBRF11",
      "RBRP11",
      "RBRR11",
      "RBRS11",
      "RBRY11",
      "RBVA11",
      "RECR11",
      "RECT11",
      "REIT11",
      "RLOG11",
      "RNGO11",
      "SADI11",
      "SARE11",
      "SHPH11",
      "SHOP11",
      "SOJA11",
      "SPTW11",
      "TECH11",
      "TGAR11",
      "TORD11",
      "TRXF11",
      "TURF11",
      "URPR11",
      "VGIR11",
      "VILG11",
      "VISC11",
      "VPSI11",
      "VSLH11",
      "WTSP11",
      "XPLG11",
      "XPML11",
      "XTED11",
      "WPLZ11",
    ];
  }

  // üîç FILTRO INTELIGENTE: Verificar se √© realmente um FII
  isValidFII(ticker) {
    // 1. Deve terminar com 11 e ter 6 caracteres
    if (!ticker.endsWith("11") || ticker.length !== 6) {
      return false;
    }

    // 2. N√£o pode ser a√ß√£o (filtrar conhecidos que n√£o s√£o FIIs)
    const excludedTickers = [
      // A√ß√µes que terminam com 11 mas n√£o s√£o FIIs
      "PETR11",
      "VALE11",
      "ITUB11",
      "BBDC11",
      "ABEV11",
      "WEGE11",
      "RENT11",
      "LREN11",
      "MGLU11",
      "VVAR11",
      "CYRE11",
      "MRFG11",
      "BEEF11",
      "JBSS11",
      "BRFS11",
      "SMTO11",
      "CSMG11",
      "CPFE11",
      "EGIE11",
      "TAEE11",
      "CMIG11",
      "ELET11",
      "NEOE11",
      "COCE11",
      "TRPL11",
      "ENBR11",
      "SBSP11",
      "SAPR11",
      "CSAN11",
      "RAIL11",
      "CCRO11",
      "EQTL11",
      "FLRY11",
      "RDOR11",
      "HAPV11",
      "QUAL11",
      "PSSA11",
      "MULT11",
      "ALPA11",
      "ALOS11",
      "ALSO11",
      "BMGB11",
      "BPAN11",
      "SANB11",
      "ITSA11",
      "BBAS11",
      "BRAP11",
      "CSNA11",
      "USIM11",
      "GOAU11",
      "GGBR11",
      "KLBN11",
      "SUZB11",
      "FIBR11",
      "CIEL11",
      "CARD11",
    ];

    if (excludedTickers.includes(ticker)) {
      return false;
    }

    // 3. Verificar se est√° na lista conhecida ou tem padr√£o de FII
    if (this.knownFIIs.includes(ticker)) {
      return true;
    }

    // 4. Padr√µes comuns de FIIs (prefixos conhecidos)
    const commonFIIPatterns = [
      /^[A-Z]{4}11$/, // Padr√£o geral de 4 letras + 11
      /^H[A-Z]{3}11$/, // Padr√£o H*** (muitos FIIs come√ßam com H)
      /^R[A-Z]{3}11$/, // Padr√£o R*** (muitos FIIs come√ßam com R)
      /^B[A-Z]{3}11$/, // Padr√£o B*** (muitos FIIs come√ßam com B)
      /^V[A-Z]{3}11$/, // Padr√£o V*** (muitos FIIs come√ßam com V)
      /^X[A-Z]{3}11$/, // Padr√£o X*** (alguns FIIs come√ßam com X)
    ];

    return commonFIIPatterns.some((pattern) => pattern.test(ticker));
  }

  // üîÑ Controle de rate limiting
  async checkRateLimit() {
    const now = Date.now();

    if (now > this.rateLimitReset) {
      this.requestCount = 0;
      this.rateLimitReset = now + 60000;
    }

    if (this.requestCount >= BRAPI_CONFIG.maxRequestsPerMinute) {
      const waitTime = this.rateLimitReset - now;
      console.log(
        `‚è≥ Rate limit atingido. Aguardando ${Math.ceil(waitTime / 1000)}s...`
      );
      await new Promise((resolve) => setTimeout(resolve, waitTime));
      this.requestCount = 0;
      this.rateLimitReset = Date.now() + 60000;
    }

    this.requestCount++;
  }

  // üåê Fazer requisi√ß√£o para BRAPI
  async makeRequest(endpoint, params = {}) {
    const token = BRAPI_CONFIG.getToken(this.brapiToken);
    if (!token) {
      throw new Error(
        "Token BRAPI n√£o configurado. Configure nas Configura√ß√µes da aplica√ß√£o."
      );
    }

    await this.checkRateLimit();

    const url = new URL(`${BRAPI_CONFIG.baseURL}${endpoint}`);
    url.searchParams.append("token", token);

    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        url.searchParams.append(key, value);
      }
    });

    for (let attempt = 1; attempt <= BRAPI_CONFIG.retryAttempts; attempt++) {
      try {
        console.log(`üåê Requisi√ß√£o BRAPI (tentativa ${attempt}): ${endpoint}`);
        const response = await fetch(url.toString(), {
          method: "GET",
          headers: {
            Accept: "application/json",
            "User-Agent": "FII-Investment-Analyzer/1.0",
          },
        });

        if (!response.ok) {
          if (response.status === 401) {
            throw new Error(
              "Token BRAPI inv√°lido. Verifique sua configura√ß√£o."
            );
          }
          if (response.status === 429) {
            throw new Error("Rate limit excedido. Aguarde alguns minutos.");
          }
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        if (data.error) {
          throw new Error(`API Error: ${data.error}`);
        }

        return data;
      } catch (error) {
        console.warn(`‚ö†Ô∏è Tentativa ${attempt} falhou:`, error.message);
        if (attempt === BRAPI_CONFIG.retryAttempts) {
          throw error;
        }
        await new Promise((resolve) =>
          setTimeout(resolve, BRAPI_CONFIG.retryDelay * attempt)
        );
      }
    }
  }

  // üìä ESTRAT√âGIA PARA 300 FIIs: Obter m√°ximo de FIIs dispon√≠veis
  async getAllAvailableFIIs() {
    try {
      console.log("üîç Buscando M√ÅXIMO de FIIs dispon√≠veis (meta: 300)...");

      // Come√ßar com lista conhecida
      let allFIIs = [...this.knownFIIs];
      console.log(`üìã ${allFIIs.length} FIIs conhecidos como base`);

      try {
        // Buscar lista completa da API
        const availableData = await this.makeRequest("/available");
        if (availableData && availableData.stocks) {
          // Filtrar apenas tickers que s√£o FIIs v√°lidos
          const extraFIIs = availableData.stocks.filter(
            (ticker) => this.isValidFII(ticker) && !allFIIs.includes(ticker)
          );

          console.log(`üìà ${extraFIIs.length} FIIs extras encontrados na API`);
          allFIIs = [...allFIIs, ...extraFIIs];
        }
      } catch (error) {
        console.warn(
          "‚ö†Ô∏è Erro ao buscar lista da API, usando apenas FIIs conhecidos:",
          error.message
        );
      }

      // üéØ OBJETIVO: Chegar pr√≥ximo de 300 FIIs
      if (allFIIs.length < BRAPI_CONFIG.maxFIIsToLoad) {
        console.log(
          `üìä Temos ${allFIIs.length} FIIs, meta √© ${BRAPI_CONFIG.maxFIIsToLoad}`
        );
      } else {
        console.log(`üéØ Meta atingida! ${allFIIs.length} FIIs encontrados`);
        // Limitar se passou muito do objetivo
        if (allFIIs.length > BRAPI_CONFIG.maxFIIsToLoad + 50) {
          allFIIs = allFIIs.slice(0, BRAPI_CONFIG.maxFIIsToLoad);
          console.log(`‚úÇÔ∏è Limitado para ${allFIIs.length} FIIs`);
        }
      }

      console.log(`‚úÖ ${allFIIs.length} FIIs selecionados para carregamento`);
      return allFIIs;
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è Erro ao buscar FIIs, usando lista conhecida:",
        error.message
      );
      return this.knownFIIs;
    }
  }

  // üí∞ Obter dados detalhados de FIIs em lotes
  async getFIIData(tickers) {
    if (!Array.isArray(tickers) || tickers.length === 0) {
      return [];
    }

    const results = [];
    const batchSize = BRAPI_CONFIG.requestsPerBatch;

    console.log(
      `üìä Processando ${tickers.length} FIIs em lotes de ${batchSize}...`
    );

    for (let i = 0; i < tickers.length; i += batchSize) {
      const batch = tickers.slice(i, i + batchSize);

      try {
        console.log(
          `üìä Lote ${Math.floor(i / batchSize) + 1}/${Math.ceil(
            tickers.length / batchSize
          )}: ${batch.join(", ")}`
        );

        const data = await this.makeRequest(`/quote/${batch.join(",")}`, {
          fundamental: "true",
          dividends: "true",
          range: "1mo",
        });

        if (data && data.results) {
          const processedData = data.results
            .map((fii) => this.processFIIData(fii))
            .filter((fii) => fii !== null);

          results.push(...processedData);
        }

        // Pausa entre lotes para n√£o sobrecarregar API
        if (i + batchSize < tickers.length) {
          await new Promise((resolve) => setTimeout(resolve, 500));
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro no lote ${batch.join(", ")}:`, error.message);
        continue;
      }
    }

    console.log(
      `‚úÖ ${results.length} FIIs processados com sucesso de ${tickers.length} solicitados`
    );
    return results;
  }

  // üîß Processar dados de um FII individual
  processFIIData(rawData) {
    try {
      if (!rawData || !rawData.symbol) {
        return null;
      }

      // Verificar se √© realmente um FII
      if (!this.isValidFII(rawData.symbol)) {
        console.log(`‚ö†Ô∏è ${rawData.symbol} n√£o √© um FII v√°lido, ignorando`);
        return null;
      }

      // Calcular dividend yield
      let dividendYield = 0;
      const price = parseFloat(rawData.regularMarketPrice) || 0;

      if (price > 0) {
        // M√©todo 1: Dividendos dos √∫ltimos 12 meses
        if (rawData.dividendsData && rawData.dividendsData.cashDividends) {
          const now = new Date();
          const oneYearAgo = new Date(
            now.getFullYear() - 1,
            now.getMonth(),
            now.getDate()
          );

          const recentDividends = rawData.dividendsData.cashDividends.filter(
            (div) => {
              const divDate = new Date(div.paymentDate || div.date);
              return divDate >= oneYearAgo;
            }
          );

          if (recentDividends.length > 0) {
            const totalDividends = recentDividends.reduce((sum, div) => {
              return sum + (parseFloat(div.rate) || 0);
            }, 0);
            dividendYield = (totalDividends / price) * 100;
          }
        }

        // M√©todo 2: Dados fundamentais
        if (dividendYield === 0 && rawData.fundamentalData) {
          const fundamental = rawData.fundamentalData;
          if (fundamental.dividendYield) {
            dividendYield = parseFloat(fundamental.dividendYield) * 100;
          }
        }

        // M√©todo 3: Estimativa por setor
        if (dividendYield === 0) {
          const sector = this.identifySector(rawData.symbol);
          const sectorYields = {
            Log√≠stica: 8.5,
            Corporativo: 7.2,
            Receb√≠veis: 9.5,
            Shopping: 6.8,
            Residencial: 7.0,
            Hoteleiro: 6.5,
            H√≠brido: 7.5,
            Educacional: 7.8,
            Sa√∫de: 7.3,
            Agroneg√≥cio: 8.0,
            Industrial: 8.2,
            "Data Center": 7.5,
            Outros: 7.0,
          };
          dividendYield = sectorYields[sector] || 7.0;
        }
      }

      const processedFII = {
        ticker: rawData.symbol,
        name: rawData.shortName || rawData.longName || rawData.symbol,
        price: price,
        dividendYield: Math.round(dividendYield * 100) / 100,
        pvp: this.calculatePVP(rawData),
        sector: this.identifySector(rawData.symbol),
        marketCap: this.calculateMarketCap(rawData),
        volume: this.calculateVolume(rawData),
        lastUpdate: new Date().toISOString(),

        // Dados m√≠nimos para otimiza√ß√£o
        fundamentalData: {
          bookValue: rawData.fundamentalData?.bookValue,
          sharesOutstanding: rawData.fundamentalData?.sharesOutstanding,
        },

        // M√©tricas para sele√ß√£o dos melhores
        qualityScore: this.calculateQualityScore(rawData, dividendYield),
        metrics: {
          liquidez: this.calculateLiquidity(rawData),
          volatilidade: this.calculateVolatility(rawData),
          consistencia: this.calculateConsistency(rawData),
        },
      };

      return processedFII;
    } catch (error) {
      console.error(`‚ùå Erro ao processar ${rawData?.symbol}:`, error);
      return null;
    }
  }

  // üéØ NOVA FUN√á√ÉO: Calcular score de qualidade para sele√ß√£o dos 100 melhores
  calculateQualityScore(rawData, dividendYield) {
    try {
      let score = 0;

      // 1. Dividend Yield (peso 30%)
      if (dividendYield >= 10) score += 30;
      else if (dividendYield >= 8) score += 25;
      else if (dividendYield >= 6) score += 20;
      else if (dividendYield >= 4) score += 15;
      else score += 10;

      // 2. P/VP (peso 25%)
      const pvp = this.calculatePVP(rawData);
      if (pvp <= 0.8) score += 25;
      else if (pvp <= 1.0) score += 20;
      else if (pvp <= 1.2) score += 15;
      else if (pvp <= 1.5) score += 10;
      else score += 5;

      // 3. Market Cap / Liquidez (peso 20%)
      const marketCap = this.calculateMarketCap(rawData);
      const volume = this.calculateVolume(rawData);
      if (marketCap >= 1000000000) score += 20; // >= 1B
      else if (marketCap >= 500000000) score += 15; // >= 500M
      else if (marketCap >= 200000000) score += 10; // >= 200M
      else score += 5;

      // 4. Volume/Liquidez (peso 15%)
      if (volume >= 1000000) score += 15; // >= 1M
      else if (volume >= 500000) score += 12; // >= 500k
      else if (volume >= 100000) score += 8; // >= 100k
      else score += 3;

      // 5. Setor (peso 10%)
      const sector = this.identifySector(rawData.symbol);
      const sectorScores = {
        Log√≠stica: 10,
        Receb√≠veis: 9,
        Industrial: 8,
        "Data Center": 8,
        Corporativo: 7,
        Agroneg√≥cio: 7,
        Residencial: 6,
        Shopping: 5,
        Hoteleiro: 4,
        Educacional: 6,
        Sa√∫de: 7,
        H√≠brido: 6,
        Outros: 3,
      };
      score += sectorScores[sector] || 3;

      return Math.min(score, 100); // M√°ximo 100
    } catch (error) {
      return 50; // Score m√©dio em caso de erro
    }
  }

  // üè¢ Identificar setor do FII
  identifySector(ticker) {
    const sectorMap = {
      // Log√≠stica
      HGLG11: "Log√≠stica",
      XPLG11: "Log√≠stica",
      BTLG11: "Log√≠stica",
      VILG11: "Log√≠stica",
      LVBI11: "Log√≠stica",
      RBRR11: "Log√≠stica",
      GGRC11: "Log√≠stica",
      FIIP11B: "Log√≠stica",
      JSRE11: "Log√≠stica",
      ALZR11: "Log√≠stica",
      RBRL11: "Log√≠stica",
      SADI11: "Log√≠stica",
      NEWL11: "Log√≠stica",
      MGFF11: "Log√≠stica",
      ARRI11: "Log√≠stica",
      CXTL11: "Log√≠stica",
      LGCP11: "Log√≠stica",
      RBLG11: "Log√≠stica",
      PATL11: "Log√≠stica",
      LOGG11: "Log√≠stica",
      BRCO11: "Log√≠stica",
      GTLG11: "Log√≠stica",
      KISU11: "Log√≠stica",
      RLOG11: "Log√≠stica",

      // Shopping
      VISC11: "Shopping",
      MALL11: "Shopping",
      XPML11: "Shopping",
      HSML11: "Shopping",
      BRML11: "Shopping",
      ALMI11: "Shopping",
      JRDM11: "Shopping",
      RBDS11: "Shopping",
      SPTW11: "Shopping",
      SHOP11: "Shopping",
      URPR11: "Shopping",
      GCRA11: "Shopping",
      PORD11: "Shopping",
      NEWU11: "Shopping",
      RBVA11: "Shopping",
      BMLC11: "Shopping",
      SHPH11: "Shopping",
      NSLU11: "Shopping",
      BBVJ11: "Shopping",
      FVPQ11: "Shopping",
      OUJP11: "Shopping",
      PLCR11: "Shopping",
      RBGS11: "Shopping",
      TORD11: "Shopping",

      // Corporativo
      KNRI11: "Corporativo",
      BBRC11: "Corporativo",
      RECT11: "Corporativo",
      FEXC11: "Corporativo",
      EDGA11: "Corporativo",
      BBPO11: "Corporativo",
      BBFI11B: "Corporativo",
      RBRP11: "Corporativo",
      GTWR11: "Corporativo",
      NEWC11: "Corporativo",
      RBCO11: "Corporativo",
      SARE11: "Corporativo",
      TGAR11: "Corporativo",
      VSLH11: "Corporativo",
      WTSP11: "Corporativo",
      CBOP11: "Corporativo",
      FCFL11: "Corporativo",
      GALG11: "Corporativo",
      HCTR11: "Corporativo",
      JPPA11: "Corporativo",
      KNCR11: "Corporativo",
      REIT11: "Corporativo",
      WPLZ11: "Corporativo",

      // Receb√≠veis
      MXRF11: "Receb√≠veis",
      IRDM11: "Receb√≠veis",
      BCRI11: "Receb√≠veis",
      RBRF11: "Receb√≠veis",
      RBRS11: "Receb√≠veis",
      RBRY11: "Receb√≠veis",
      FIIB11: "Receb√≠veis",
      BRCR11: "Receb√≠veis",
      CPTS11: "Receb√≠veis",
      CXRI11: "Receb√≠veis",
      DEVA11: "Receb√≠veis",
      FIGS11: "Receb√≠veis",
      GALG11: "Receb√≠veis",
      HABT11: "Receb√≠veis",
      HCRI11: "Receb√≠veis",
      JSAF11: "Receb√≠veis",
      KNHY11: "Receb√≠veis",
      KNSC11: "Receb√≠veis",
      MCCI11: "Receb√≠veis",
      RECR11: "Receb√≠veis",
      RNGO11: "Receb√≠veis",

      // Residencial
      HGRE11: "Residencial",
      VGIR11: "Residencial",
      RBRD11: "Residencial",
      RBRA11: "Residencial",
      HGRU11: "Residencial",
      HGBS11: "Residencial",
      HGCR11: "Residencial",
      HGFF11: "Residencial",
      HGPO11: "Residencial",
      HGTX11: "Residencial",
      BLMO11: "Residencial",
      BRPR11: "Residencial",
      FAMB11: "Residencial",
      VPSI11: "Residencial",

      // Hoteleiro
      HTMX11: "Hoteleiro",
      NVHO11: "Hoteleiro",
      BRHT11: "Hoteleiro",
      RBHT11: "Hoteleiro",

      // H√≠brido
      BPFF11: "H√≠brido",
      BPML11: "H√≠brido",
      BTCR11: "H√≠brido",

      // Educacional
      RBED11: "Educacional",
      EDFO11: "Educacional",
      EDUC11: "Educacional",

      // Sa√∫de
      CARE11: "Sa√∫de",

      // Agroneg√≥cio
      AGCX11: "Agroneg√≥cio",
      RBAG11: "Agroneg√≥cio",

      // Industrial
      RBIV11: "Industrial",

      // Data Center
      DRIT11: "Data Center",
      DTCY11: "Data Center",
    };

    return sectorMap[ticker] || "Outros";
  }

  // üìä Calcular P/VP
  calculatePVP(rawData) {
    try {
      const price = parseFloat(rawData.regularMarketPrice) || 0;
      const bookValue = parseFloat(rawData.fundamentalData?.bookValue) || 0;

      if (price > 0 && bookValue > 0) {
        return Math.round((price / bookValue) * 100) / 100;
      }

      // Fallback por setor
      const sector = this.identifySector(rawData.symbol);
      const sectorPVPs = {
        Log√≠stica: 1.05,
        Corporativo: 0.95,
        Receb√≠veis: 1.15,
        Shopping: 0.85,
        Residencial: 0.9,
        Hoteleiro: 0.8,
        H√≠brido: 1.0,
        Educacional: 0.95,
        Sa√∫de: 1.1,
        Agroneg√≥cio: 1.05,
        Industrial: 1.0,
        "Data Center": 1.2,
        Outros: 1.0,
      };

      return sectorPVPs[sector] || 1.0;
    } catch (error) {
      return 1.0;
    }
  }

  // üí∞ Calcular Market Cap
  calculateMarketCap(rawData) {
    try {
      const price = parseFloat(rawData.regularMarketPrice) || 0;
      const shares =
        parseFloat(rawData.fundamentalData?.sharesOutstanding) || 0;

      if (price > 0 && shares > 0) {
        return Math.round(price * shares);
      }

      return null;
    } catch (error) {
      return null;
    }
  }

  // üìä Calcular Volume
  calculateVolume(rawData) {
    try {
      return parseFloat(rawData.regularMarketVolume) || 0;
    } catch (error) {
      return 0;
    }
  }

  // üíß Calcular Liquidez
  calculateLiquidity(rawData) {
    try {
      const volume = parseFloat(rawData.regularMarketVolume) || 0;
      const price = parseFloat(rawData.regularMarketPrice) || 0;

      if (volume > 0 && price > 0) {
        return volume * price;
      }

      return 0;
    } catch (error) {
      return 0;
    }
  }

  // üìà Calcular Volatilidade
  calculateVolatility(rawData) {
    try {
      if (
        rawData.historicalDataPrice &&
        rawData.historicalDataPrice.length > 1
      ) {
        const prices = rawData.historicalDataPrice.map((d) =>
          parseFloat(d.close)
        );
        const returns = [];

        for (let i = 1; i < prices.length; i++) {
          returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);
        }

        const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;
        const variance =
          returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) /
          returns.length;

        return Math.sqrt(variance) * Math.sqrt(252);
      }

      return 0.15;
    } catch (error) {
      return 0.15;
    }
  }

  // üéØ Calcular Consist√™ncia
  calculateConsistency(rawData) {
    try {
      if (rawData.dividendsData && rawData.dividendsData.cashDividends) {
        const dividends = rawData.dividendsData.cashDividends;

        if (dividends.length >= 12) {
          const values = dividends
            .slice(-12)
            .map((d) => parseFloat(d.rate) || 0);
          const mean = values.reduce((sum, v) => sum + v, 0) / values.length;
          const variance =
            values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) /
            values.length;
          const stdDev = Math.sqrt(variance);

          return mean > 0 ? 1 - stdDev / mean : 0;
        }
      }

      return 0.5;
    } catch (error) {
      return 0.5;
    }
  }

  // üéØ FUN√á√ÉO PRINCIPAL: Selecionar os 100 melhores FIIs para IA
  selectBestFIIsForAI(allFIIs) {
    console.log(
      `\nüéØ SELECIONANDO OS ${BRAPI_CONFIG.maxFIIsForAI} MELHORES FIIs PARA IA...`
    );

    // Filtrar FIIs com dados v√°lidos
    const validFIIs = allFIIs.filter(
      (fii) => fii.price > 0 && fii.dividendYield > 0 && fii.qualityScore > 0
    );

    console.log(`üìä ${validFIIs.length} FIIs v√°lidos para sele√ß√£o`);

    // Ordenar por qualityScore (decrescente)
    const sortedFIIs = validFIIs.sort(
      (a, b) => b.qualityScore - a.qualityScore
    );

    // Pegar os melhores
    const bestFIIs = sortedFIIs.slice(0, BRAPI_CONFIG.maxFIIsForAI);

    console.log(`‚úÖ ${bestFIIs.length} melhores FIIs selecionados para IA`);

    // Log dos crit√©rios de sele√ß√£o
    console.log("\nüìà CRIT√âRIOS DE SELE√á√ÉO DOS 100 MELHORES:");
    console.log("1. Dividend Yield (30%): Quanto maior, melhor");
    console.log("2. P/VP (25%): Quanto menor, melhor (valor justo)");
    console.log("3. Market Cap (20%): Maior = mais liquidez");
    console.log("4. Volume (15%): Maior = mais negociabilidade");
    console.log("5. Setor (10%): Log√≠stica > Receb√≠veis > Industrial > etc.");

    if (bestFIIs.length > 0) {
      const topFII = bestFIIs[0];
      console.log(`\nüèÜ MELHOR FII: ${topFII.ticker}`);
      console.log(`   Score: ${topFII.qualityScore}/100`);
      console.log(`   DY: ${topFII.dividendYield}%`);
      console.log(`   P/VP: ${topFII.pvp}`);
      console.log(`   Setor: ${topFII.sector}`);
    }

    return bestFIIs;
  }

  // üéØ M√©todo principal para obter dados com token do Supabase
  async getAllFIIData(brapiToken = null) {
    try {
      console.log(
        "üöÄ [FIIDataManager] Iniciando carregamento ULTIMATE de 300 FIIs..."
      );

      if (brapiToken) {
        this.setBrapiToken(brapiToken);
      }

      if (!this.isTokenConfigured()) {
        throw new Error(
          "Token BRAPI n√£o configurado. Configure nas Configura√ß√µes da aplica√ß√£o."
        );
      }

      // 1. Obter lista expandida de FIIs (meta: 300)
      const allFIIs = await this.getAllAvailableFIIs();
      console.log(`üìã ${allFIIs.length} FIIs encontrados`);

      // 2. Obter dados detalhados
      const fiiData = await this.getFIIData(allFIIs);
      console.log(`‚úÖ ${fiiData.length} FIIs processados com sucesso`);

      return fiiData;
    } catch (error) {
      console.error("‚ùå [FIIDataManager] Erro ao carregar dados:", error);
      throw error;
    }
  }

  // üéØ M√©todo para obter os melhores FIIs para IA
  async getBestFIIsForAI(brapiToken = null) {
    const allFIIs = await this.getAllFIIData(brapiToken);
    return this.selectBestFIIsForAI(allFIIs);
  }
}

// üéØ Inst√¢ncia singleton
const fiiDataManager = new FIIDataManager();

// üéØ Fun√ß√£o principal para uso externo
export const getAllFIIData = async (brapiToken = null) => {
  return await fiiDataManager.getAllFIIData(brapiToken);
};

// üéØ Fun√ß√£o para obter os 100 melhores FIIs para IA
export const getBestFIIsForAI = async (brapiToken = null) => {
  return await fiiDataManager.getBestFIIsForAI(brapiToken);
};

// üéØ Fun√ß√£o para configurar token
export const setBrapiToken = (token) => {
  fiiDataManager.setBrapiToken(token);
};

// üéØ Fun√ß√£o para verificar configura√ß√£o
export const isTokenConfigured = () => {
  return fiiDataManager.isTokenConfigured();
};

export default fiiDataManager;

// üöÄ FII DATA API - INTERFACE FRONTEND PARA SISTEMA H√çBRIDO
// Wrapper para acessar o sistema h√≠brido via API calls

class FIIDataAPI {
  constructor() {
    this.baseUrl = 'http://localhost:3001/api/fii-data';
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutos
  }

  /**
   * üîç BUSCAR DADOS DE FIIs ESPEC√çFICOS
   */
  async getFIIData(tickers = null) {
    // Se n√£o especificar tickers, buscar todos
    if (!tickers) {
      return this.getAllFIIs();
    }

    const cacheKey = `fii-data-${tickers.sort().join(',')}`;
    
    // Verificar cache
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        console.log('üì¶ Dados obtidos do cache');
        return cached.data;
      }
    }

    try {
      console.log(`üîç Buscando dados de FIIs via API: ${tickers.join(', ')}`);
      
      const response = await fetch(`${this.baseUrl}/get-data`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ tickers })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      // Salvar no cache
      this.cache.set(cacheKey, {
        data,
        timestamp: Date.now()
      });

      console.log(`‚úÖ Dados de ${data.length} FIIs obtidos com sucesso`);
      return data;

    } catch (error) {
      console.error('‚ùå Erro ao buscar dados FII:', error);
      throw error;
    }
  }

  /**
   * üåê BUSCAR TODOS OS FIIs DISPON√çVEIS
   */
  async getAllFIIs() {
    const cacheKey = 'all-fiis';
    
    // Verificar cache
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        console.log('üì¶ Todos os FIIs obtidos do cache');
        return cached.data;
      }
    }

    try {
      console.log('üåê Buscando todos os FIIs via API...');
      
      const response = await fetch(`${this.baseUrl}/all-fiis`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      // Salvar no cache
      this.cache.set(cacheKey, {
        data,
        timestamp: Date.now()
      });

      console.log(`‚úÖ ${data.length} FIIs obtidos com sucesso`);
      return data;

    } catch (error) {
      console.error('‚ùå Erro ao buscar todos os FIIs:', error);
      throw error;
    }
  }

  /**
   * üéØ BUSCAR MELHORES FIIs PARA IA
   */
  async getBestFIIs(limit = 10, filters = {}) {
    try {
      console.log(`üéØ Buscando top ${limit} FIIs para an√°lise...`);
      
      const response = await fetch(`${this.baseUrl}/best-fiis`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ limit, filters })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`‚úÖ Top ${data.length} FIIs obtidos para an√°lise`);
      return data;

    } catch (error) {
      console.error('‚ùå Erro ao buscar melhores FIIs:', error);
      throw error;
    }
  }

  /**
   * üîÑ ATUALIZAR DADOS FOR√áADAMENTE
   */
  async refreshData(tickers = null) {
    try {
      console.log('üîÑ For√ßando atualiza√ß√£o de dados...');
      
      const response = await fetch(`${this.baseUrl}/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ tickers })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      // Limpar cache
      this.cache.clear();
      
      console.log(`‚úÖ ${data.updated_count} FIIs atualizados com sucesso!`);
      return data;

    } catch (error) {
      console.error('‚ùå Erro ao atualizar dados:', error);
      throw error;
    }
  }

  /**
   * üìä OBTER ESTAT√çSTICAS DO SISTEMA
   */
  async getStats() {
    try {
      console.log('üìä Obtendo estat√≠sticas do sistema...');
      
      const response = await fetch(`${this.baseUrl}/stats`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const stats = await response.json();
      console.log('üìà Estat√≠sticas obtidas:', stats);
      return stats;

    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      throw error;
    }
  }

  /**
   * üîç BUSCAR FII ESPEC√çFICO
   */
  async getFII(ticker) {
    const data = await this.getFIIData([ticker]);
    return data.length > 0 ? data[0] : null;
  }

  /**
   * üìà AN√ÅLISE FUNDAMENTALISTA
   */
  async getAnalysis(ticker) {
    try {
      console.log(`üìà Obtendo an√°lise fundamentalista de ${ticker}...`);
      
      const response = await fetch(`${this.baseUrl}/analysis/${ticker}`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const analysis = await response.json();
      console.log(`‚úÖ An√°lise de ${ticker} obtida`);
      return analysis;

    } catch (error) {
      console.error('‚ùå Erro ao obter an√°lise:', error);
      throw error;
    }
  }

  /**
   * üßπ LIMPAR CACHE
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ Cache limpo');
  }

  /**
   * üéØ BUSCAR MELHORES FIIs PARA IA (alias para getBestFIIs)
   */
  async getBestFIIsForAI(limit = 20, filters = {}) {
    return this.getBestFIIs(limit, filters);
  }

  /**
   * üìä OBTER ESTAT√çSTICAS DO SISTEMA (alias para getStats)
   */
  async getSystemStats() {
    return this.getStats();
  }

  /**
   * üßπ LIMPEZA DO SISTEMA
   */
  async cleanup() {
    try {
      console.log('üßπ Executando limpeza do sistema...');
      
      const response = await fetch(`${this.baseUrl}/cleanup`, {
        method: 'POST'
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      this.clearCache();
      console.log('‚úÖ Limpeza do sistema conclu√≠da');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erro na limpeza do sistema:', error);
      throw error;
    }
  }
}

// Inst√¢ncia singleton
const fiiDataAPI = new FIIDataAPI();

export default fiiDataAPI; 